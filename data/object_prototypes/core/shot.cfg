#Originates from Frogatto

{
id: "shot",
prototype: ["hittable"],

collide_dimensions: ["player","enemy","~hazard"],
solid_dimensions: ["enemy","player","common"],

#make it so when the object runs into solid parts of the level, an on_collide_level event is fired so the shot can be destroyed.
object_level_collisions: true,
has_feet: false,

/*
expected things a user of this prototype must implement to deal damage
	properties.attackDamage - how much damage is dealt
	properties.attack_knockback - a power-level for how hard it hits.
	properties.damageCooldown_ - how long the enemy will be invincible, used to cap the DPS of flamethrower-esque weapons, whilst allowing nigh-unlimited numbers of shots to make the attack easy to hit with.
		Note that if cooldown is zero, the enemy should always take damage.
	animation attack_area - an area that will trigger a hit
	animation body_area - only set this if you want this shot to be neutralizable by enemy shots
*/
properties: {
	team_: "string :: 'evil'",
	attack_knockback: "int :: 0",
	attackDamage: "int :: if(higher_difficulty, 2, 1)",
	damageCooldown_: "int :: 0",

		#only for death upon striking an enemy body/armor_ area, NOT for from hitting enemy attack areas.  Always dies instantly.
	diesUponDealingDamage_: "bool :: true",

		#causes the shot to bleed HP (usually to die instantly because it has only one HP) if it hits an enemy attack area.  Primarily used to allow frogatto to breathe fire/energy-shots at the enemy and deflect their shots with his shots - almost always set in favor of the player.
	deflectableViaAttacks_: "bool :: if(team_ = 'player', false, true)",  

		#these two properties exist because there may be cases (like the homing shot) where we want a projectile that does expire upon successfully hitting, but only if it successfully hits an actual enemy, not shots fired by the enemy.  
	isShot_: 	"bool :: true",
	goesThroughEnemyShots_: "bool :: false",


	GetHitBy: "def(obj hittable collide_with) -> commands if( (collide_with.damageCooldown_ < (level.cycle - time_last_hit)),
										[add(me.hitpoints, - collide_with.attackDamage), set(time_last_hit, level.cycle)])",

},
on_collide_side: "die()",
on_collide_level: "die()",


#--------------------------  collision handlers --------------------------#	
	#remember, these events are NOT for dealing damage to an enemy - the enemy takes care of that in its copies of these events (in hittable).  These are only for potentially dealing damage to ourselves.  The design pattern in frogatto is that the victim decides everything WRT its own damage; the attacker simply provides info the victim makes decisions with.

#if we hit our body, try bleeding HP from potential deflections
on_collide_object_body: "if(arg.collide_with is obj hittable, if(arg.collide_with.team_ != team_ and (arg.collide_with_area = 'attack' or arg.collide_with_area = 'thrown'),
								if(deflectableViaAttacks_, GetHitBy(arg.collide_with))	))",

#since our attack hit, decide if we want to kill ourselves.		  
on_collide_object_attack: "if(arg.collide_with is obj hittable, if(arg.collide_with.team_ != team_ and arg.collide_with_area = 'body', 
									if(diesUponDealingDamage_ and if(arg.collide_with is obj shot, arg.collide_with.deflectableViaAttacks_ = true, true), if(me.goesThroughEnemyShots_ and arg.collide_with.isShot_, null, die()))	))",
}
