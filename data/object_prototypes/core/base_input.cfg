{
#This is the prototype for buttons. The object implimenting this must have a 'normal' animation.
id: "base_input",
is_strict: true,
always_active: true,
zorder: 100,
properties: {
	offset: 0,

	#The margin of the object when setting position. Can be a number, or a list containing an x/y pair.
	reference_anchor: { type: '[int]', defaut: [0,0] },

#A function which takes no args, or a list containing an x/y pair. This object can provide a reference point via the getAnchor method.
	anchorPoint: 7,
	is_gui_element: 1,

	list_multiply: "def(list list_one, list list_two) -> list
		map(range(size(list_one)), 'index',	list_one[index] *
		list_two[index])",

	getAnchor: "def(int mode, list crds_in) -> list
		[
			if(mode in [1,4,7], crds[0],
				if(mode in [2,5,8], crds[0],
				if(mode in [3,6,9], crds[0]))),
			if(mode in [7,8,9], crds[1],
				if(mode in [4,5,6], crds[1],
				if(mode in [1,2,3], crds[1])))
		] where crds = anchor(mode, crds_in)",

	setAnchor: "def(int mode, list crds_in) -> commands
		[
			if(mode in [1,4,7], set(self.x, crds[0]),
				if(mode in [2,5,8], set(self.midpoint_x, crds[0]),
				if(mode in [3,6,9], set(self.x, crds[0]-self.img_w)))),
			if(mode in [7,8,9], set(self.y, crds[1]),
				if(mode in [4,5,6], set(self.midpoint_y, crds[1]),
				if(mode in [1,2,3], set(self.y, crds[1]-self.img_h))))
		] where crds = anchor(mode, crds_in)",

	anchor: "def(int mode, list crds_in) -> list
		list_add(
			list_multiply(
				[	if(mode in [1,4,7], 1, if(mode in [3,6,9], -1)),
					if(mode in [7,8,9], 1, if(mode in [1,2,3], -1))],
				if(is_list(offset), list <- offset, [offset, offset])), 
				//[offset, offset])), 
			//if(is_list(crds_in), crds_in, crds_in()))",
			crds_in)",
				
	# 		Anchor Mode Map:
	# 		 ╔═╦═╦═╗
	# 		 ║7║8║9║
	# 		 ╠═╬═╬═╣
	# 		 ║4║5║6║
	# 		 ╠═╬═╬═╣
	# 		 ║1║2║3║
	# 		 ╚═╩═╩═╝
	# 		For example, getAnchor(2) would return [midpoint_x, y+img_h] of this object. Anchor point 7 would be just [x,y], and 5 returns the midpoints.
	getCameraAnchor: "def(int mode) -> list
			list_add(
				level.camera_position[0:2], 
				[	if(mode in [1,4,7], 0,
						if(mode in [2,5,8], level.camera_position[2]/2-self.img_w/2,
							if(mode in [3,6,9], level.camera_position[2]-self.img_w) )
						),
					if(mode in [7,8,9], 0,
						if(mode in [4,5,6], level.camera_position[3]/2-self.img_h/2,
							if(mode in [1,2,3], level.camera_position[3]-self.img_h) )
						)
				]
			)",

	#		getCameraAnchor = getCameraAnchor_ 
	#This is so we can subclass it, and still referenc it. It only works once...
	# so that's why we add getCameraAnchor__ and getCameraAnchor___ as needed.
	# Either that or bug Sirp to add proto.getCameraAnchor.
	#Redefine usable to fail when your object shouldn't capture mouse input for some reason.
//	usable: "def(smouse) 1",
	
	activate_gui_element: "[ #This is only for use for after you've deactivated the widget, it's automatically activated.#
		add(level.player.gui_elements, [self]),
		]",
		
	deactivate_gui_element: "[
		set(level.player.gui_elements, filter(level.player.gui_elements, 'gui_element', gui_element != self)),
		]",
},

on_create: "[
	add(level.player.gui_elements, [self]),
	if(not reference_anchor, set(reference_anchor, def() getCameraAnchor(7))),
	fire_event('update_position'),
	]",
	
on_update_position: "if(reference_anchor, [
	setAnchor(anchorPoint, reference_anchor)])",

	
on_draw: "if(reference_anchor and (not is_list(reference_anchor)), [
	setAnchor(anchorPoint, reference_anchor),
	])",
}
