{
id: "item_acquirable",
is_strict: true,
prototype: ["standard_values"],
zorder: "@include data/zorder.cfg:items",
reverse_global_vertical_zordering: false,
respawns: false,
collide_dimensions: ["item"],
editor_info: {
	category: "props",
},

properties: {
	been_acquired: { type: "bool", default: false },

#-------------------------- 'attraction' handlers --------------------------#
	attractable: "bool :: false",  //categorically speaking, can this get pulled in by the "magnetic" attractor powerup?
	_should_attract: "bool :: if((not _has_started_attracting) and (me.attractable and _is_inside_attraction_range), true, false)",
	_has_started_attracting: "bool :: (not _started_attracting_at_cycle = null)",
	_started_attracting_at_cycle: { type: "int|null", default: null },
	_is_inside_attraction_range: "bool :: (lib.math.length(me,level.player) < 200)",
	_angle_to_player: "decimal :: lib.math.angle(me, level.player)",
	
	start_attract: "[set(_started_attracting_at_cycle,level.cycle), /*set(solid_area, null),*/ annul_regular_physics]",

	attract_duration: "decimal :: 125.0",
	attraction_elapsed: "int :: (level.cycle - _started_attracting_at_cycle) asserting _started_attracting_at_cycle is int",
	fraction_into_attraction: "decimal :: attraction_elapsed/attract_duration",
	ang_offset: "attraction_elapsed * 0.5",

	annul_regular_physics: "commands :: null", //some items have gravity in their default animations; this exists to let them set themselves to an animation without physics.
	
	process_attract: "commands :: if(_has_started_attracting and (not been_acquired),
			[	
				set(mid_x, level.player.mid_x - x_diff) where x_diff = ((1.0 - fraction_into_attraction) * cos(_angle_to_player + ang_offset) * lib.math.length(me,level.player)),
				set(mid_y, level.player.mid_y - y_diff) where y_diff = ((1.0 - fraction_into_attraction) * sin(_angle_to_player + ang_offset) * lib.math.length(me,level.player)),
				
				if(level.cycle - _started_attracting_at_cycle > attract_duration, do_acquisition),
			] asserting _started_attracting_at_cycle is int)",
			
#-------------------------- special interlude sequence FX handlers --------------------------#
	should_lock_player_and_do_fancy_acquisition_interlude: "bool :: false", //only BIG treasures, like heart pieces and such, merit this
	
	show_flavor_text: "commands :: speech_dialog(level.player, [~You got a thing!~], set(level.player.animation,'item_get_end'))",
	
	do_item_acquisition_interlude_sequence: "[
		schedule(1, [set(level.player.animation,'item_get_begin'), set(me.alpha, 150)]),
		schedule(10, show_flavor_text),
		schedule(100, set(level.player.animation,'item_get_end')),
	]",

#-------------------------- cosmetic acquisition FX handlers --------------------------#
	do_basic_cosmetic_acquisition_fx: "[do_screen_flash, do_size_dilation_sequence, do_particle_fx, do_sfx]",

	do_screen_flash: "commands :: null",  
	do_size_dilation_sequence: "commands :: schedule(20, [ //usually this is consistent, but in rare cases it might need to be custom
		sinusoidal_scale_transition(150,0,90, 1, 1),
		schedule(150, sinusoidal_scale_transition(30,90,90, 0, 2)),
	])",
	do_particle_fx: "commands :: null",
	do_sfx: "commands :: null",
	removal_time: "int :: 201", //only really customized for stuff that has a very fast size_dilation, and isn't doing the interlude thing.
	
#-------------------------- acquisition handlers --------------------------#
	grab_range: "int :: 15",
	do_acquisition: "commands :: if((not been_acquired), [
		set(been_acquired, true),
		if(should_lock_player_and_do_fancy_acquisition_interlude, do_item_acquisition_interlude_sequence),
		if(not should_lock_player_and_do_fancy_acquisition_interlude, do_basic_cosmetic_acquisition_fx),
		[set(velocity_x, 0),set(velocity_y, 0)],
		schedule(1, bind_command( def() fire_event('acquired') )),
		schedule(removal_time, die())
	])",
},

on_process: "if(abs(me.midpoint_x-level.player.midpoint_x) < grab_range
			and abs(me.midpoint_y-level.player.midpoint_y) < grab_range,
				do_acquisition)",

on_end_normal_anim: "animation('normal')",
}
