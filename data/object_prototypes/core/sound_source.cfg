{
id: "sound_source",
always_active: true,
prototype: ["standard_values"], // To do sound-wave stuff
is_strict: true,

properties: {
	_sound_data: "SoundData :: GetSoundData(string <- sound_defaults[sound_file]['effectName'])",

	_sound_distance: "def(obj sound_source source, obj player_controlled reciever) -> decimal
		decimal(
			max(
				map(
					zip(source.midpoint_xy, reciever.midpoint_xy, a-b),
					abs(value))
				)
			)",
	
	// we have a variety of different functions to make the sounds trail off over a distance;
	// some sounds need to shut up quickly when you pass by, others should carry a long way.
	_falloff_distance: "decimal :: 
		if(falloff_distance != -1, falloff_distance, preset_falloff_dist) 
			where preset_falloff_dist = 
				decimal(_sound_data.carryDist) 
			asserting 
				(not level.in_editor) //speed optimization, doing the lookup hurts performance by about 30% atm.
				or sound_file in keys(sound_defaults) | 'all ambient sounds must have an entry in the sound_source prototype'",
			
	_attenuate_linearly: "def(decimal distance) -> decimal
		_falloff_distance / distance - 0.8
	",

	//falloff dist here is the point at which it dips below 1, since the point it actually reaches
	// zero is infinitely far away
	_attenuate_inverse: "def(decimal distance) -> decimal
		(_falloff_distance/ max(1.0,distance/1.1) ) 
	",

	_distance_attenuation_function: "def(decimal distance) -> decimal
		if(preset_function is function(decimal) -> decimal,
			preset_function(distance),
			_attenuate_linearly(distance)
		) where preset_function =
			sound_defaults[sound_file] and
			me['_attenuate_' + sound_defaults[sound_file]['distance_attenuation_function']]
	",
	
	//this is the core function that decides how loud we are.
	sound_volume_multiplier: "def(obj sound_source source, obj player_controlled reciever) -> decimal
		max(_sound_volume_scale_cache.min, 
			min(1.0,_distance_attenuation_function(_sound_distance(source, reciever) ))
				- (1 - _sound_volume_scale_cache.max))
		* _sound_current_volume",
	
	_sound_volume_scale_cache: {
		type: "{min: decimal, max: decimal}",
		init: "{min: 0, max: 0}",
	},
	
	
	sound_enable: "[set(sound_enabled, true), fire_event('create')]",
	sound_disable: "[set(sound_enabled, false), fire_event('die')]",
	
	sound_fade_in: "_sound_fade(true)",
	sound_fade_out: "_sound_fade(false)",
	_sound_fade: "def(mode) -> commands
		map(
			if(mode, range(sfd), reverse(range(sfd))),
			schedule(value, set(_sound_current_volume, (value+1)/sfd))
			) where sfd = decimal(sound_fade_duration)",
			
	_sound_coordinator_existing: "find(filter(level.chars, value is obj sound_source_coordinator), value.sound_file = sound_file)",
			
	_sound_new_coordinator: "[
		set(_sound_coordinator, the_coordinator),
		add_object(the_coordinator),
		] where the_coordinator = object('sound_source_coordinator', 10, 10, {monitoring: [me], sound_file: sound_file})",
		
	_sound_volume_scale: "
		if(preset_volume, {
			min: sound_volume_min, 
			max: preset_volume * sound_volume_max,
		},{
			min: sound_volume_min,
			max: sound_volume_max,
		}) where preset_volume = if(sound_defaults[sound_file], sound_defaults[sound_file].sound_volume_max)",
	
	// The rest of the information is pulled out of 'data/sound.cfg'
	sound_defaults: { type: "{string -> {
			sound_volume_max: decimal,
			distance_attenuation_function: string,
			effectName: string,
			frequency: int
		}
	}", default:{
		'ambient/river.ogg': {
			sound_volume_max: 0.8,
			distance_attenuation_function: 'inverse',
			effectName: 'river',
			frequency: 15
		},
	}, set: "null /*cannot set this, is immutable!*/" },
	
	sound_fade_duration: "15", 			//Fade in/out frame duration.
#-------------------------- temp vars --------------------------#
	_sound_coordinator: { type: "obj sound_source_coordinator|null", dynamic_initialization: false, persistent: false },
	_sound_current_volume: { type: "decimal", default: 0, persistent: false },			//Internal counter, for use with fading in/out. Ranges between 1 and 0.
	sound_enabled: { type: "bool", default: true, persistent: false },				//Prefer using the accessor properties, sound_enable/sound_disable, unless you haven't added the object yet.

#-------------------------- vars --------------------------#
	sound_file: { type: "string", default: "ambient/river.ogg", editor_info: { type: "enum", enum_values: "@eval map(get_files_in_dir('sounds/ambient'), 'ambient/'+value)" } },

	sound_volume_min: { type: "decimal", default: 0.0 },				//Endpoints for volume scale are defined by 'min' and 'max'.
	sound_volume_max: { type: "decimal", default: 1.0 },
	falloff_distance: { type: "decimal", default: -1 },				//Distance for maximum softness, if maximum loudness is 1.  For example, the default volume range is from 0 to .75, which would cause the sound to start playing at a distance of 7.5. If the maximum volume loudness was 1, we'd play at 10.
	
    effect_frequency: "if(sound_file in keys(sound_defaults),
    	sound_defaults[sound_file].frequency, 100)",
},

	
on_create: "[if(sound_file != '' and sound_enabled,
	if(coordinator, [coordinator.add(me),set(_sound_coordinator, coordinator)], _sound_new_coordinator)
		where coordinator = _sound_coordinator_existing
	),
	sound_fade_in,
	set(_sound_volume_scale_cache, _sound_volume_scale),
	]",
	
on_die: "if(_sound_coordinator, _sound_coordinator.remove(me))",  

}
