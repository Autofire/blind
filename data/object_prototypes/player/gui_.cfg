{
id: "gui_",
//prototype: ["text_handler_blind"],

properties: {
	# -- gui -- #
	border_offset: "int :: 27",	# Add this to top-left based coords, otherwise subtract
	
	gui_left:   "border_offset",
	gui_right:  "level.camera_position[2] - border_offset",
	gui_hmid:   "level.camera_position[2]/2 - border_offset",
	
	gui_top:    "border_offset",
	gui_bottom: "level.camera_position[3] - border_offset",
	gui_vmid:   "level.camera_position[3]/2 - border_offset",
	
	/************************************************************************
	 *   CreateChoices({'display1': 'action1', 'display2': 'action2'...})
	 * Creates a list of buttons displaying 'displayN', which do
	 * eval('actionN') when clicked.  These are all created in the right pane
	 * of the HUD.
	 ************************************************************************/
	CreateChoices: "def({string -> commands|[commands]} choices,
						bool destroyChoicesOnClick = true) -> commands [
		DestroyChoices(),	// Clean up any messes so we don't get tons of buttons
		map(keys(choices),
			spawn('button',
				gui_right  - offset_x,
				gui_bottom - offset_y + index*button_height,
				{buttonLabel: value,
				 action:      choices[value],
				 destroyChoicesOnClick:
				              destroyChoicesOnClick}
			)	where button_height   = 66 // Make greater than button height x2
				where gui_offset      = 27 // Is the global offset of gui
				where offset_x        = 78 // Larger means farther from the right
				where offset_y        = 435// Larger means farther from the bottom
		)
	]",

	// Erase every button object on the gui
	DestroyChoices: "def() -> commands
		map(filter(level.chars, value is obj button), remove_object(value))
	",
	
	
	gui_heart_display: {
		type: "obj heart_display",
		init: "object('heart_display', 27 + 10, 27+104, {})",
		persistent: false,
	},
	
	gui_button: {
		type: "obj button",
		init: "object('button', level.camera_position[2] - 27, level.camera_position[3] - 27, {})",
		persistent: false,
	},
	
	gui_frame: {
		type: "obj frame",
		init: "object(
				'frame',
				400, //level.camera_position[2]/2, 
				300, //level.camera_position[3]/2, 
				{}
			)",
		persistent: false,
	},
	

	guiDescriptionWriter: {
		type: "obj text_writer",
		init: "object('text_writer', 10 + 27, 3 + 27,
			{defaultCharWait: 1}
		)",
		persistent: false,
	},
	
	guiDialogWriter: {
		type: "obj text_writer",
		init: "object('text_writer', 10 + 27, level.camera_position[3] - (46) - 27,
			{buffer: 'Use WASD to move around._n_Turn your speakers on!'}
		)",
		persistent: false,
	},

	// Ussed by SetUpGui and TearDownGui
	components: "[gui_heart_display, guiDescriptionWriter, guiDialogWriter, gui_frame]",

	SetUpGui: "def() -> commands [
		map(components,
			'gui_element', [
				remove_object(gui_element),
				add_object(gui_element),
			]
		)
	]",

	TearDownGui: "def() -> commands [
		map(components,
			'gui_element', [
				remove_object(gui_element),
			]
		)
	]",
} // End of properties

} // End of file
