{
id: "seq_handler_",

properties:
{
	/*************
	 * SEQUENCES *
	 *************/
	
	/**************************************************************************
	 * Sequences are a way to manage game events, and is very closely tied with
	 * the game's dialog. Sequences aren't actually connected to the dialog
	 * functions at all, however, and can be used independantly.  (This is
	 * because sequences accept functions rather than strings, etc.)
	 *
	 *
	 * ---OVERVIEW-------------------------------------------------------------
	 *
	 * At the heart of this system is the seqLibrary_, which is probably loaded
	 * from a prototype, and contains almost all of the game's text.  The
	 * sequences are referenced with a currentSeqName, while individual
	 * sequences are lists of commands which are executed sequentially, once per
	 * frame. (Or until seqIsBusy becomes false. See below.)
	 *
	 * Sequences are sorted by level to make cross-level conflicts avoidable.
	 * However, we can still reference other level's sequences.  (See the
	 * function StartSeq() ).
	 *
	 * Multiple sequences can be run at once. (See next section for details.)
	 * This is so that we can have touch-related sequences without conflicting
	 * with dialog sequences.
	 *
	 *
	 * ---MAKING SEQUENCES WORK------------------------------------------------
	 *
	 * In order for sequences to work, UpdateSequence() must be run in
	 * on_process.  Otherwise, it will get neglected and die. In order to start
	 * a new sequence, just call StartSeq() with the requested seqence name as
	 * an argument. This won't work for uninterruptible sequences.
	 *
	 * To run more than one sequence at once, give a sequence channel with
	 * StartSeq('sequenceName', 'levelName' or '', 'channelName').  The channels
	 * will run independantly, but they WILL override eachother if they
	 * try accessing the same output source. Therefor, use with care! The
	 * channel defaults to 'desc'.
	 *
	 *
	 * ---INTERRUPTIBLE SEQUENCES----------------------------------------------
	 *
	 * Some sequences are considered uninterruptible, meaning that StartSeq()
	 * will do nothing UNLESS the sequence has been completed.  This is helpful
	 * for vital story scenes, but not so much for chitchat. To make a sequence
	 * uninterruptible, start the name with an underscore.
	 * 
	 *
	 * ---BUSY SEQUENCE EXPLANATION--------------------------------------------
	 * 
	 * When seqIsBusy becomes true, then sequences STOP RUNNING until this
	 * boolean is set back to false. This can be EXTREMELY DANGEROUS, especially
	 * in the case of uninterruptible sequences. If you want to do this,
	 * typically, you'll want to nest a list (in which case all of the nested
	 * commands will run together). To keep things from hanging up, you have to
	 * set seqIsBusy either with the commands run or by some outside source.
	 *
	 * The AddText family of function can handle this aspect of sequences.  Just
	 * set the third argument to true. When all the text is displayed, then it
	 * will declare the system no longer busy.
	 *
	 * Starting another sequence will also unset the business flag.
	 *
	 **************************************************************************/
	
	// This must be defined in an object or prototype which uses this prototype.
	// This is formatted as seqLibrary_[levelName][sequenceName] -> [commands]
	seqLibrary_: "{ string -> { string -> commands } } :: {}",

	// seq[channelName].data
	// If code attempts to use something other than the default channels, it
	// will lead to bizzare errors. Take care with this!
	seq: {
		type: '{string -> {
			name:      string, // Name of the currently loaded sequence
			index:     int,    // Index into the loaded sequence
			levelName: string, // Level inwhich the sequence is grouped under
			isBusy:    bool    // When true, the channel cannot run until
			                   //   this becomes false
        }}',


		default: {
			'desc': {
				name:      'null',
				index:     0,
				levelName: 'general',
				isBusy:    false
			},
			'dial': {
				name:      'null',
				index:     0,
				levelName: 'general',
				isBusy:    false
			}

		},
	},

	

	// Handy properties
	CurrentSeq: "def(string channel) -> [commands]
		if(seq[channel].levelName != '',
			seqLibrary_[seq[channel].levelName][seq[channel].name],
			seqLibrary_['general'][seq[channel].name]
		)
	",
	

	// Most of the time, sequences are interruptable. Sometimes, though, they
	// are not. In such a case, it can only be interrupted if it's finished.
	/*currentSeqIsInterruptible: "bool :: (
		currentSeqName[0] != '_' or
		seqIndex >= size(current)
	)",*/

	SeqIsInterruptible: "def(string channel) -> bool
		seq[channel].name[0] != '_' or
		seq[channel].index >= size(CurrentSeq(channel))
	",

	// Functions
	/**************************************************************************
	 *   StartSeq:
	 * This function's goal is mainly to run a sequence. It doesn't actually do
	 * anything; it just lets UpdateSeq run on its marry way. This function
	 * cannot check whether the sequence exists or not; if it did so, it would
	 * cause a world-ending infinite loop.
	 *
	 * seqType chooses the type of sequence to store it in. The types are
	 * handled independantly. It's prefered to use just 'desc' and 'dial',
	 * but anything may be used, as long as there is a secition in
	 * seqLibrary_ for it.
	 *
	 * If a level name is given, then the game will draw from the given
	 * level's sequence rather than the generic one. This is helpful to
	 * prevent crazy name conflicts. If no name is given, it assumes the
	 * current level.
	 **************************************************************************/
	StartSeq: "def(
				string requestedSeqName,
				string channel         = 'desc',
				string targetLevelName = '') -> commands
		if(SeqIsInterruptible(channel) and
		   requestedSeqName != seq[channel].name, // No endless loops into self

			[if(targetLevelName = '',
				set(seq[channel].levelName, level.id), // Use current level name
				set(seq[channel].levelName, targetLevelName)
			 ),
			
			 set(seq[channel].name, requestedSeqName),
			 set(seq[channel].index, 0),
			 set(seq[channel].isBusy, false)
			],
		) where _seq = seq[channel] asserting seq[channel] != null
	",
	
	// Updates sequences on all channels
	UpdateSeq: "def() -> commands
		map(keys(seq), 'channel',
			if(not seq[channel].isBusy and
			   seq[channel].index < size(CurrentSeq(channel)),
				[CurrentSeq(channel)[seq[channel].index],	// Run current set of commands
				 add(seq[channel].index, 1),	// Advance the index
				 //debug(seq[channel].name)
				]
			)
		)
	",

	// If teleporting within a sequence, call this to clear all channels,
	// then teleport.
	SeqTeleport: "def(string destLevel) -> commands [
		set(priorityCue, {}),
		StartSeq('Clear desc', 'desc', 'general'),
		StartSeq('Clear dial', 'dial', 'general');
		teleport(destLevel)
	]",

	/*******************
	 * PRIORITY SYSTEM *
	 *******************/
	// This manages which object's events fire in the case of overlapping.
	priorityCue: { type: '{int -> commands|null}', default: {} },
	greatestPriority_: "int|null ::
		choose(
			filter(keys(priorityCue), priorityCue[value] != null),
			value
		)
	",
	
	/*************************************************************************
     *   NewPriority:
     * This function adds a new priority to the cue, assuming that given
     * priority number isn't already taken. If the priority is the greatest
     * one in the list, then it will activate once. Otherwise, it is silently
     * added and nothing else happens.
     *************************************************************************/
	NewPriority: "def(int priority, commands opp) -> commands
		if(priorityCue[priority] = null, // If it's not there, we get null anyway
			[   if(priority > greatestPriority_,
					opp
				),
				set(priorityCue[priority], opp)
			]
		)
	",
	
	/*************************************************************************
     *   RemovePriority:
     * This function removes a entry in the priority cue. If that entry used
     * to be in the highest priority, then the next-highest priority is run
     * in its place.
     *************************************************************************/
	RemovePriority: "def(int priority) -> commands
		if(priority in keys(priorityCue),
			if(priority = greatestPriority_,
			[   set(priorityCue[priority], null);
				priorityCue[greatestPriority_]
			],
				set(priorityCue[priority], null)
			)
		)
	",




} // End of properties

} // End of file
