{
id: "text_handler_",

properties: {
	// TODO: Add support for speaker variable?

	// These are aliases that make it much easier to work with this stuff.
	describe: "obj text_writer :: guiDescriptionWriter",
	dialog:   "obj text_writer :: guiDialogWriter",

	//   AddText:
	// This function will add text to the specified obect. See arguments
	// and text_writer.cfg for more help.
	AddText: "def(obj text_writer target,	// Use `describe` or `dialog`
				  string text,				// Text to display
				  bool   forcePage  = false)// If true, empty buffer
				  						-> commands [
		
		// If we're forcing, change page instantly; it's probably important
		if(forcePage,
			set(target.buffer, '_p2_' + text),
			set(target.buffer, target.buffer + '_p_' + text),
		)
	]",

	// This really just let's an accessing object reach this one
	Wordwrap: "def(obj text_writer target, string text) -> string 
		target.Wordwrap(text)
	",

	
	/*******************
	 * PRIORITY SYSTEM *
	 *******************/
	// This manages which object's events fire in the case of overlapping.
	_priorityCue: { type: '{int -> [commands]|null}', default: {} },
	_greatestPriority: "int|null ::
		choose(
			filter(keys(_priorityCue), _priorityCue[value] != null),
			value
		)
	",
	
	/*************************************************************************
     *   NewPriority:
     * This function adds a new priority to the cue, assuming that given
     * priority number isn't already taken. If the priority is the greatest
     * one in the list, then it will activate once. Otherwise, it is silently
     * added and nothing else happens.
     *************************************************************************/
	NewPriority: "def(int priority, [commands] code) -> commands
		if(priority in keys(_priorityCue) or _priorityCue[priority] = null,
			[   if(dump(priority > _greatestPriority),
					code
				),
				set(_priorityCue[priority], code)
			]
		)
	",
	
	/*************************************************************************
     *   RemovePriority:
     * This function removes a entry in the priority cue. If that entry used
     * to be in the highest priority, then the next-highest priority is run
     * in its place.
     *************************************************************************/
	RemovePriority: "def(int priority) -> commands
		if(priority in keys(_priorityCue),
			if(priority = _greatestPriority,
			[   set(_priorityCue[priority], null);
				_priorityCue[_greatestPriority]
			],
				set(_priorityCue[priority], null)
			)
		)
	",

} // End of Properties

} // End of file
