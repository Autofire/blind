{
id: "staff_",

properties: {

	/**************************
	 * STAFF FUNCTIONS/VALUES *
	 **************************/
	staffLength_:    "int :: 60",
	staffSegments_:  "int :: 15",
	staffThickness_: "int :: 6",
	armLength_:      "int :: 2", // Segments to drop
	
	StaffXYChain: "def(decimal angle) -> [Point2d]
		GenXYChain(
			[level.player.mid_x + 1, level.player.mid_y], // Shift it over
			angle,
			staffLength_,
			staffSegments_
		)[2:]
	",
	
	StaffLevelCollisions: "def(decimal angle) -> [bool]
		SolidXYChain(StaffXYChain(angle), staffThickness_)
	",
	
	NearestStaffCollision: "def(decimal angle) -> int
		index(StaffLevelCollisions(angle), true)
	",
	
	UnoccupiedStaffSegments: "def(decimal angle) -> [Point2d]
		if(NearestStaffCollision(angle) > -1,
			StaffXYChain(angle)[:NearestStaffCollision(angle)],
			StaffXYChain(angle)
		)
	",
	
	RenderStaffSegments: "def(decimal angle) -> commands [
		ClearStaffSegments(),
		map(
			UnoccupiedStaffSegments(angle),
			spawn(
				'blind_playable.staff_segment',
				value[0],
				value[1],
				{rotate:    angle,
				 animation: targetAnim__
				 }
			)
			// Picks blind anmiation if relevent, and also places end correctly
			where targetAnim__ =
				if(level.player.is_blind, 'blind_', '') +
				if(value = back(UnoccupiedStaffSegments(angle)), 'end', 'normal')
		)
	]",
	
	ClearStaffSegments: "def() -> commands
		remove_object(
			filter(
				level.chars,
				value is obj blind_playable.staff_segment
			)
		)
	",

	/*********************
	 * GENERAL FUNCTIONS *
	 *********************/

	/****************************************************************************
	 *   GenXYChain
	 *
	 * Given an angle, a "reach" (magnitude of a vector), and a number of points,
	 * this will create a set of evenly spaced points. These points are relative
	 * to the given XY origin.
	 *
	 * This function isn't bound to the staff system, but it is closely
	 * related.
	 ****************************************************************************/
	GenXYChain: "
		def(
			Point2d origin,
			decimal angle,
			int     magnitude,
			int     totalPoints
		) -> [Point2d]
		
		map(
			range(totalPoints),
			[radius__ * cos(angle) + origin[0],
			 radius__ * sin(angle) + origin[1]]
				where radius__ = magnitude * (value + 1.0) / totalPoints
		)
	",
	
	// Like solid(), but explicitly detects around a square
	SolidSquare: "def(Point2d targetXY, int size) -> bool
		bool(solid(
			level,
			int(targetXY[0]) - size/2,
			int(targetXY[1]) - size/2,
			size,
			size
		))
	",
	
	SolidXYChain: "def([Point2d] chain, int size) -> [bool]
		map(chain, SolidSquare(value, size))
	",
	
}, // End of properties

object_type: [
{
	id: "staff_segment",
	
	animation: [
		{
			"@base": true,
			image:   "characters/player.png",
			y: 124,
			w: 3, h: 3
		},
		{
			id: "normal", x: 1,
		},
		{
			id: "end",    x: 5,
		},
	
		// We use sepearate animations instead of variations because animations are faster
		{
			"@base": true,
			image:   "characters/player_blind.png"
		},
		{
			id: "blind_normal", x: 1,
		},
		{
			id: "blind_end",    x: 5,
		},
	]
},
], // End of object_type

} // End of file
