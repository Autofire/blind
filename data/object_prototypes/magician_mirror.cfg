{
id: "magician_mirror",
prototype: ["hittable"],

editor_info: { category: "Characters" },
solid_dimensions: ["player","enemy","level"],
collide_dimensions: ["player","enemy","level","skull"],

#make it so when the object runs into solid parts of the level, an on_collide_level event is fired so the shot can be destroyed.
object_level_collisions: true,
has_feet: false,
timer_frequency: 5,

zorder: "@include data/zorder.cfg:player",

properties: {
	movespeed: "int :: 2",
	attackDamage: 1,	
	team_: "'evil'",
	normal_alpha: 200,
	attack_cooldown: "int :: 150",
	
	cycle_of_last_check: { type: 'int', default: 0 },	
	old_midpoint_xy: { type: '[int]', default: [0,0] },
	
	flinchThreshold_: 0,
	hurtVelocityY_: "0",
	hurtVelocityX_: "0",
	
	// We'll remember the facing just in case we need to restore it later
	remembered_facing: { type: "string", default: 'down' },
	store_facing: "if(
		facingDown_, set(me.remembered_facing, 'down'),
		facingUp_, set(me.remembered_facing, 'up'),
		facingRight_, set(me.remembered_facing, 'right'),
		facingLeft_, set(me.remembered_facing, 'left'))",
	restore_facing: "switch(me.remembered_facing,
		'down', animation('look_down'),
		'up', animation('look_up'),
		'right', animation('look_right'),
		'left', animation('look_left'),)",
	
	# -- Solid checking -- #
	solid_dir: "def(string dir) -> bool
		switch(dir,
			'down', solid_down,
			'up', solid_up,
			'right', solid_right,
			'left', solid_left,
			solid_down)",
	solid_down: "bool :: bool(solid(level, me.midpoint_x-10,me.midpoint_y,   20,22))",
	solid_up:   "bool :: bool(solid(level, me.midpoint_x-10,me.midpoint_y-20,20,22))",
	solid_right:"bool :: bool(solid(level, me.midpoint_x,   me.midpoint_y-10,22,20))",
	solid_left: "bool :: bool(solid(level, me.midpoint_x-20,me.midpoint_y-10,22,20))",
	
	opposite_dir: "def(string dir) -> string
		switch(dir,
			'down', 'up',
			'up',   'down',
			'right','left',
			'left', 'right',
			'down')",
	
	avail_dir: "[string] :: filter(['up','left','right','down'] + [facingDir_],
									value != opposite_dir(facingDir_) and not solid_dir(value))",

		// Before we loop forever, check for a dead end!
	new_dir: "if(avail_dir = [], any_new_dir, _new_dir(1d(size(avail_dir))-1))",
	_new_dir: "def(int rand) -> commands 
		if(solid_dir(avail_dir[rand]),
			new_dir, // Repeat until we get something valid
			change_anim('walk_'+avail_dir[rand]))",
	
	any_new_dir: "_any_new_dir(1d4-1)",
	_any_new_dir: "def(int rand) -> commands 
		if(solid_dir(any_dir[rand]),
			any_new_dir, // Repeat until we get something valid
			change_anim('walk_'+any_dir[rand]))
		where any_dir = ['left','right','down','up']",
	
	try_dir: "def(string dir) -> commands
		if(solid_dir(dir), new_dir, change_anim('walk_'+dir))",
		
	offset_x: "16",
	offset_y: "16",
	align_self: "[align_self_x, align_self_y]", // Tile size is 32
	align_self_x: "add(me.midpoint_x,offset_x-me.midpoint_x%32)",	
	align_self_y: "add(me.midpoint_y,offset_y-me.midpoint_y%32)",
	is_aligned: "bool :: bool(me.midpoint_x%32 = offset_x and me.midpoint_y%32 = offset_y)",
	
# -- Player handles -- #
	// DO NOT DELETE; THESE ARE VERY NECESSARY!
	MakeForwardX: "def(int velocity) -> int
		if(dir_to_player = 'right', velocity,
		   dir_to_player = 'left',  -velocity,
		   0)",
	MakeForwardY: "def(int velocity) -> int
		if(dir_to_player = 'down', velocity,
		   dir_to_player = 'up',  -velocity,
		   0)",	
	launch_velocity: "750",

	is_player_behind: "facingDir_ = dir_from_player",

	is_vision_obstructed: "bool(
		solid(level,midpoint_x,midpoint_y,	// Ensure than width and height of rect is never 0 (causes glitch)
			if(level.player.midpoint_x-midpoint_x != 0, level.player.midpoint_x-midpoint_x, 1),
			if(level.player.midpoint_y-midpoint_y != 0, level.player.midpoint_y-midpoint_y, 1) ))",
	is_player_visible: "bool :: not is_vision_obstructed and not is_player_behind",
	x_dist: "me.midpoint_x - level.player.midpoint_x",
	y_dist: "me.midpoint_y - level.player.midpoint_y",
	normal_dir_to_player: "string :: if(abs(x_dist) < abs(y_dist),
		if(x_dist < 0, 'right', 'left'),
		if(y_dist < 0, 'down', 'up'))",
	dir_to_player: "string :: if(abs(x_dist) > abs(y_dist),
		if(x_dist < 0, 'right', 'left'),
		if(y_dist < 0, 'down', 'up'))",
		
	dir_from_player: "opposite_dir(dir_to_player)",
	normal_dir_from_player: "opposite_dir(dir_from_player)",
	
	is_on_lens: "false",	// Placeholder
	
	is_lined_up_to_attack: "abs(x_dist) <= 8 or abs(y_dist) <= 8",
	cycle_of_last_attack: { type: 'int', default: 0 },
	is_attack_on_cooldown: "cycle - cycle_of_last_attack < attack_cooldown",
	
	begin_attack: "fire_event('attack')",
	// If we can actually see player, then walk towards player. Otherwise, try shortest route.
	track_player: "try_dir(dir_to_player)",
	avoid_player: "if(solid_dir(normal_dir_from_player),
		try_dir(normal_dir_from_player),
		try_dir(dir_from_player))",
		
	cycle_of_last_sight: {type: 'int', default: 0},
	is_player_found: "bool :: cycle - cycle_of_last_sight < track_duration
		where track_duration = 200",
		
	HandleSpecialDamageResponse: "def(obj hittable|null collide_with) -> commands 
		set(me.animation, 'look_'+dir_to_player)",
},

on_create: "[animation('look_down'),
			set(facing, 1),	// No flipping! Must always face the same direction
			align_self]",

on_die: "[add(level.player.enemy_count, -1),
		if(1d4 = 4, spawn('heart', midpoint_x, midpoint_y, facing))]",
		
on_process: "if(solid(level,me.midpoint_x-12,me.midpoint_y-12,24,24), [align_self])",
on_collide_custom: "if(arg.team_ = 'evil', any_new_dir)",
		//change_anim('walk_'+['up','down','left','right'][1d4 -1]))",

on_end_look_down_anim: "animation('walk_down')",
on_end_look_up_anim: "animation('walk_up')",
on_end_look_right_anim: "animation('walk_right')",
on_end_look_left_anim: "animation('walk_left')",

on_process_walk_up:   "[add(y, -movespeed), fire_event('process_walk')]",
on_process_walk_down: "[add(y,  movespeed), fire_event('process_walk')]",
on_process_walk_right:"[add(x,  movespeed), fire_event('process_walk')]",
on_process_walk_left: "[add(x, -movespeed), fire_event('process_walk')]",
	// Keep us from getting stuck
on_process_walk: "if(midpoint_xy = old_midpoint_xy and cycle - cycle_of_last_check > 100,
		[animation('walk_'+opposite_dir(facingDir_)), set(cycle_of_last_check, cycle)],
		if(midpoint_xy != old_midpoint_xy, [set(old_midpoint_xy, midpoint_xy), set(cycle_of_last_check, cycle)])
		)",

on_end_walk_up_anim: "animation('walk_up')",
on_end_walk_down_anim: "animation('walk_down')",
on_end_walk_right_anim: "animation('walk_right')",
on_end_walk_left_anim: "animation('walk_left')",

on_end_cast_down_anim: "animation('look_down')",
on_end_cast_up_anim: "animation('look_up')",
on_end_cast_right_anim: "animation('look_right')",
on_end_cast_left_anim: "animation('look_left')",
}
