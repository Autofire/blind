## This will contain a general class defining what a single node of dialog
## will look like. We assume that there is a custom object called 'player'
## which has full access to the game world and everything we need to make
## decisions. You might want to pass in game state using something other than
## 'obj player' -- but that's your choice. However you want to represent all
## the game state.

{
	properties: {
/*		on_entry: "def(obj mage_playable player, obj dialog_display dialog) ->commands
		[
			add(dialog.text, _text),
			_add_options(player, dialog),
		]
		",

		_add_options: "def(obj mage_playable player, obj dialog_display dialog) ->commands
			add(dialog.options, filter(_options, value = null or value.is_available(player)))
		",*/

		_text: { type: "string", default: "" },

//		_options: { type: "[class dialog_node.option]" },
	}

/*	classes: [{
		option: {
			properties: {
				text: { type: "string", default: "" },
				on_select: "def(obj mage_playable player, obj dialog_display dialog) -> commands dialog.close()",
				is_available: "def(obj mage_playable player) ->bool true",
			}
		}
	}]*/
}
