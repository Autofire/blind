// This class contains functions and properties which help manage the sounds
// and visuals that go with the sounds. It does not look up files for the
// calling functions; the calling functions have to handle this. However,
// it does look up data/sounds.cfg and automatically fetch the given data
// for the sound effects, including the visuals.
{/*
	PlaySoundPoint: "def(
		string soundFileName,
		[int]  sourceXY,
		[int]  hearerXY,
		string soundEffectRef = ''
	) -> commands [

//		sound(soundFileName, effect.volume * (effectDistance/actualDistance)^0.75) // What is the 0.75 for?
//			where effectDistance = ((effect.growthSpeed * effect.lifetime) * 256)
//			where actualDistance = if(_dist != 0, _dist, 0.0000000001) // Avoid divide by 0
//				where _dist = sqrt((sourceXY[0] - hearerXY[0])^2 + (sourceXY[1] - hearerXY[1])^2)

		/*spawn('sound_wave', x, y,
			{lifetime:   lib.sound.getEffectLifetime(soundFileRef, soundFileName),
			 rbg:        lib.sound.getEffectRBG(soundFileRef, soundFileName),
			 init_scale: lib.sound.getEffectInitScale(soundFileRef, soundFileName)
			}
		)*/
	] where effect =
		if(soundEffectRef != '', 
			getEffectProperties(soundEffectRef),
			getEffectProperties(soundFileName)
		)
	",

	getEffectProperties: "def(string ref) ->
			{volume:      decimal,
			 lifetime:    decimal,
			 rbg:         [int],
			 initScale:   decimal,
			 growthSpeed: decimal,
			 delayRandom: int,
			 delayForced: int}
		
		if(ref in keys(effectProperties), effectProperties[ref], effectProperties['default'])
	",

	// TODO: Make this accept incomplete values, using @base or something.
	effectProperties: "
		{ string ->
			{volume:      decimal,
			 lifetime:    decimal,
			 rbg:         [int],
			 initScale:   decimal,
			 growthSpeed: decimal,
			 delayRandom: int,
			 delayForced: int}
		} <- get_document('data/sounds.cfg')
	",
*/
}

