{
	/*************************************************************************
     *   Wordwrap:
     * This wraps the input into lines. This cuts all newlines, as they
     * would screw with the process. This function returns the string with
     * newlines in place of the first space before the the maximum line
     * length, `charsPerLine_`. Game CRASHES if you don't have any
     * divisions before wrap- around point. (AKA a super long word. Usually
     * won't happen unless you have a really short word.)
     *
     * wordSeparator must be a single character. (Typically a space.)
     *************************************************************************/
    Wordwrap: "def(string inStr,
                   int    charsPerLine = 68,
                   string wordSeparator = ' ') -> string
        _Wordwrap( CutNewlines(inStr), charsPerLine, wordSeparator )
    ",

    /*************************************************************************
     *   _WordWrap:
     * The purpose of having a separate function is for recursion. See above.
     *************************************************************************/
    _Wordwrap: "def(string inStr, int charsPerLine, string wordSeparator) -> string
        if(size(inStr) > charsPerLine,
            // Do linebreak stuff and return.
            inStr[:wrapPoint] + '\n'
              + _Wordwrap(inStr[wrapPoint + 1:], charsPerLine, wordSeparator),

            // The string is short enough! Return it.
            inStr   // else
        ) where wrapPoint =
                choose(
                    filter(
                        lib.str_manip.FindChar(inStr, wordSeparator),
                        value <= charsPerLine // Drop those too great
                    ),
                    value   // Pick the largest of the remaining
                )
    ",

	/************************************************************************* 
     *   FindChar: 
     * Handy character-finder. Returns all of the indicies where the character 
     * appears. 
     *************************************************************************/ 
    FindChar: "def(string inStr, string searchChar) -> [int] 
        filter( 
            map(inStr, if(value = searchChar, index) ), 
            value != null 
        ) 
    ",

	/*************************************************************************
     *   CutEscapeSequences:
     * Drops ALL escape sequences from the string passed it, and then
     * returns it.
     *************************************************************************/
    CutNewlines: "def(string inStr) -> string
        fold(filter(map(inStr, value), value != '\n'), a + b)
    ",
}
