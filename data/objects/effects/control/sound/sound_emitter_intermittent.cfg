{
id: "sound_emitter_intermittent",
hidden_in_game: true,
is_strict: true,
always_active: true,
ignore_collide: true,
zorder: "@include data/zorder.cfg:in_front_of_everything",
//prototype: ["sound_source"],
editor_info: {
	category: "controllers, sound",
},


properties: {
	available_audio_files: "map(get_files_in_dir('sounds/ambient-intermittent'), 'ambient-intermittent/'+value)",
	stripped_core_names: "map(available_audio_files, regex_replace(value, q((\\d)*\\.(wav|ogg)), ''))",
	effect_name_count: "size(filter(stripped_core_names, value = effect_name_path + effect_name_root))",
	effect_name_root: "regex_replace(_filename, '\\.(wav|ogg)', '')",
	effect_name_path: "'ambient-intermittent/'",
	effect_name_extension: "'.' + regex_replace(_filename, '\\D+([.]){1}', '')",
	final_sound_name: "effect_name_path + effect_name_root
		+ if(effect_name_count > 0 and _variant_prng != null, _variant_prng.get_next_value + 1, '')
		+ effect_name_extension",
	
	
	delay_random: "if(effect_name_root in keys(sound_file_properties),
		sound_file_properties[effect_name_root].delay_random, 100)",
	delay_forced: "if(effect_name_root in keys(sound_file_properties),
		sound_file_properties[effect_name_root].delay_forced, 100)",
	effect_volume: "if(effect_name_root in keys(sound_file_properties),
		sound_file_properties[effect_name_root].volume, 1.0)",
	
	effect_lifetime: "if(effect_name_root in keys(sound_file_properties),
		sound_file_properties[effect_name_root].lifetime, 1.0)",
	effect_rbg: "if(effect_name_root in keys(sound_file_properties),
		sound_file_properties[effect_name_root].rbg, [255,255,255])",
	effect_init_scale: "if(effect_name_root in keys(sound_file_properties),
		sound_file_properties[effect_name_root].init_scale, 2.0)",
	effect_speed: "if(effect_name_root in keys(sound_file_properties),
		sound_file_properties[effect_name_root].growth_speed, 0.03)",
	effect_distance: "((effect_speed * effect_lifetime) * 256)", // 256 is the radius of wave.png
	
	distance_to_player: "if(_dist != 0, _dist, 0.0000000001)
		where _dist = sqrt((me.midpoint_x - level.player.midpoint_x)^2 + (me.midpoint_y - level.player.midpoint_y)^2)",

	sound_file_properties: "
		{ string ->
			{delay_random: int,
			 delay_forced: int,
			 volume: decimal,
			 lifetime: decimal,
			 rbg: [int],
			 init_scale: decimal,
			 growth_speed: decimal}
		} :: //<- get_document('data/sounds.cfg')
		{   'drip': {
				delay_random: 50,
				delay_forced: 150,
				volume:	1.0,
				lifetime: 1.0,
				rbg: [10, 240, 100],
				init_scale: 0.01,
				growth_speed: 0.03
			},
		}",

#-------------------------- vars --------------------------#
	//e.g. 'Cave-Drip.wav' <- 'ambient-intermittent/Cave-Drip5.wav'
	_filename: { type: "string", default: "drip.wav", editor_info: { type: "enum", enum_values: "@eval unique(map(map(get_files_in_dir('sounds/ambient-intermittent'), value), regex_replace(value, q((\\d)*), '')))" } },

	_variant_prng:	{ type: "class pseudo_random_numbers|null", default: null, persistent: false }
},

on_create: "[
				if(effect_name_root and effect_name_count,schedule(1,fire_event('play_sound'))),
				if(effect_name_count > 0, set(_variant_prng, construct('pseudo_random_numbers', {_size_of_pool:effect_name_count,_pool_size_multiplier: 1}) ),
				)
			]",
			
on_play_sound: "[
					schedule(1d(delay_random)+delay_forced,fire_event('play_sound')),
	sound(final_sound_name, final_effect_volume),
	if(_variant_prng != null, _variant_prng.iterate_random_pool),
		spawn('sound_wave', me.midpoint_x, me.midpoint_y,
			{lifetime: effect_lifetime,
			 rbg: effect_rbg, 
			 init_scale: effect_init_scale
			}
		)	
	] where final_effect_volume = effect_volume * (effect_distance/distance_to_player)^0.75",
					// sqrt is used to provide a graduale falloff

animation: {
	id: "normal",
	image: "effects/particles.png",
	x: 179,
	y: 166,
	w: 28,
	h: 28,
	duration: -1,
},
}
