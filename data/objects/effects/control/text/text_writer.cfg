// The writer of the game's text. Handles page breaks and wordwrapping.
//
// DONE?: Make it so that new text directly following a display clear does
// not involve a pause. (Maybe something in on_timer? 
{
id: "text_writer",
is_strict: true,
use_absolute_screen_coordinates: true,
hidden_in_game: true,
serializable: false,

editor_info: { category: "controllers, gui" },
zorder: "@include data/zorder.cfg:in_front_of_everything",


on_create: "[
	set(charWait, defaultCharWait),
	set(pageWait, defaultPageWait),
	set(font,     defaultFont)
]",

on_process: "[
	UpdateDisplay(),
	text(display, font),
]",


properties: {
	"@derive": "@include data/object_prototypes/core/standard_values.cfg:properties",

	/*************
	 * CONSTANTS *
	 *************/
	linesPerPage_: "int :: 3",		// Used for automatic page-breaks
	charsPerLine_: "int :: 68",		// Used for automatic line-breaks
	escapeChar_:   "string :: '_'",	// Character which escape sequences are
									// surrounded by. MUST BE ONE CHARACTER.
	
	// These are defaults for some of the variables below. They are used
	// in place of setting defaults normally functions which manipulate
	// this object may want to reset the object back to its default state.
	defaultCharWait: "int :: 2",
	defaultPageWait: "int :: 100",
	defaultFont:  "string :: 'white_outline'",

	/*************
	 * VARIABLES *
	 *************/
	buffer:  { type: 'string', default: '' },	// Post-processed output string
	display: { type: 'string', default: '' },	// Currently displayed text
	history: { type: '[string]',
	           default: ['End of history'] },	// Keeps old pages

	charWait: { type: 'int',
				dynamic_initialization: true }, // Cycles until next character
	pageWait: { type: 'int',
				dynamic_initialization: true }, // Cycles until page change

	linesOnPage: { type: 'int', default: 0 }, // Tracks newlines (for pagebreaking)
	
	speaker: { type: 'string', default: '' },	// UNUSED. Meant for dialog
												// to say who is speaking.
	font: { type: 'string', 
			dynamic_initialization: true }, // Font to use.
	
	
	/*************
	 * FUNCTIONS *
	 *************/

	/*************************************************************************
	 *   UpdateDisplay:
	 * Steps through the buffer, respecting all possible escape sequences.
	 * It also respects the timers 'PageBreakCountdown' and the current
	 * buffer. In order to stop execution, the timer for the current buffer
	 * should be set. This means that, when creating a timer, typically the
	 * idea is to create it with the name of the buffer AFTER the current
	 * opperation. This could either mean cutting a character/escape sequnce
	 * and then making the timer.
	 *
	 * Note that this doesn't automatically word wrap on it's own. Also, it
	 * has a special exception for newline characters. Specifically, it
	 * calls DoEscape with '_n_' to trigger all the special effects of our
	 * newline escape character.
	 *************************************************************************/
	UpdateDisplay: "def() -> commands
		if(Timer_HasExpired('PageBreakCountdown'),
		
			if(buffer != '' and Timer_HasExpired(buffer),
				if(buffer[0] = escapeChar_,
					[   DoEscape(buffer),
						set(buffer, DeleteEscape(buffer))
					],
				   buffer[0] = '\n',	// else if
				    [   DoEscape('_n_'),// Catch true newlines
						set(buffer, buffer[1:])
					],
				   // else; print one character
					[   set(display, display + buffer[0]),
						Timer_Start(buffer[1:], charWait),
						set(buffer, buffer[1:])
					]
				)
			), // End if(buffer != '' and Timer_HasExpired(buffer), ... )
			
			if(Timer_RemainingTime('PageBreakCountdown') = 1,
				DoPageBreak()
			)
			
		) // End if(Timer_HasExpired('PageBreakCountdown'), ... )
	",

	/*************************************************************************
	 *   DoEscape:
	 * Do everything related to escape sequences, other than cutting the
	 * escape sequence out of the input. (The calling function has to do
	 * this.) Assuming that escapeChar_ = '_', the possible escape sequences
	 * are:
	 *
	 *  _n_    | New line, or new page, if necessary. Can NOT be
	 *         | substituted by a regular newline, (i.e. '\n') although
	 *         | UpdateDisplay() accounts for this.
	 *         |
	 *  _p100_ | Force a new page, waiting given cycles before moving to new
	 *         | page. Leaving out the number will use pageWait
	 *         | instead. If a number is given, it must be at least 2.
	 *         |
	 *  _P200_ | Sets the wait time on each page break if when _p_ is used.
	 *         | If given no time, the default time is used.
	 *         |
	 *  _w100_ | Pause output for the specified number of cycles. (100, in
	 *         | this case.) This overwrites the default wait time.
	 *         |
	 *  _W30_  | Set the default wait time on each character. If no time is
	 *         | given, the system reverts to the default time. takes effect
	 *         | instantly.
	 *         |
	 *  _e..._ | Evaluate the given command. (TODO)
	 *         |
	 *  _any_  | If random junk is given, the function will print an error
	 *         | in the debug output, but nothing else happens.
	 * 
	 *
	 *   Note on this function's `where` statements:
	 * split() produces a list of strings. Since DoEscape is only called
	 * when the first character is an underscore, the result of split()
	 * will always be ['', <escape sequence>, ...].  Selecting the second
	 * element of this list, then will get us the entire escape seqence.
	 * Because this isn't too useful, there are two where statements, each
	 * which extract useful info.
	 *************************************************************************/
	DoEscape: "def(string inStr) -> commands (
		switch(escapeType_,
		
			       // Will we roll over by adding another newline?
			'n',if(linesOnPage + 1 >= linesPerPage_,
					CuePageBreak(),
					[   set(display, display + '\n'),
						add(linesOnPage, 1)
					]
				),
				
			'w',Timer_Start( DeleteEscape(buffer), int(escapeValue_) ),
			'W',set(charWait,
					if(int(escapeValue_) != 0,
						int(escapeValue_),
						defaultCharWait
					)
				),
			
			'p',CuePageBreak(int(escapeValue_)),
			'P',set(pageWait,
					if(int(escapeValue_) != 0,
						int(escapeValue_),
						defaultPageWait
					)
				),
			
			// Default action
			debug('WARNING: \"' + escapeType_ +
			      '\" IS NOT A VALID ESCAPE CHARACTER.')
			
		) // End of switch(escapeType_, ...)
			
			where escapeType_    = escapeString_[0]
			where escapeValue_   =
				if(size(escapeString_) > 1,
					escapeString_[1:],   // Only try this is a value to grab!
					0					// Something safe if no value given
				)
				
	) where escapeString_ = split(inStr, escapeChar_)[1]
	",

	/*************************************************************************
	 *   DeleteEscape:
	 * Return the inputted string without the first escape sequence. Assumes
	 * that the escape sequence is at the very start of the string and is
	 * delimited by underscores.
	 *************************************************************************/	
	DeleteEscape: "def(string inStr) -> string
		inStr[secondDelimiter_ + 1 : ]
			where secondDelimiter_ = FindChar(inStr, escapeChar_)[1]
	",

	/*************************************************************************
	 *   CuePageBreak:
	 * Cue up a new page, using the default wait time if no other time is
	 * specified.
	 *************************************************************************/
	CuePageBreak: "def(int delay = 0) -> commands [
		if(delay != 0,
			Timer_Start('PageBreakCountdown', delay),
			Timer_Start('PageBreakCountdown', pageWait)
		)
	]",

	/*************************************************************************
	 *   DoPageBreak:
	 * Create a new page and save the old one.
	 *************************************************************************/
	DoPageBreak: "def() -> commands [
		set(history, [display] + history),
		set(display, ''),
		set(linesOnPage, 0)
	]",


	/*************************************************************************
	 *   WordWrap:
	 * This wraps the input into lines. This cuts all escape sequences and
	 * newlines, as they would screw with the process. This function
	 * returns the string with newlines in place of the first space before
	 * the the maximum line length, `charsPerLine_`. Game CRASHES if you
	 * don't have any divisions before wrap- around point. (AKA a super
	 * long word. Usually won't happen unless you have a really short
	 * word.)
	 * 
	 * wordSeparator must be a single character. (Typically a space.)
	 *************************************************************************/
	WordWrap: "def(string inStr, string wordSeparator = ' ') -> string
		_WordWrap( CutEscapeSequences(inStr), wordSeparator )
	",

	/*************************************************************************
	 *   _WordWrap:
	 * The purpose of having a separate function is for recursion. See above.
	 *************************************************************************/
	_WordWrap: "def(string inStr, string wordSeparator) -> string
		if(size(inStr) > charsPerLine_,
			// Do linebreak stuff and return.
			inStr[:wrapPoint] + '\n'
			  + _WordWrap(inStr[wrapPoint + 1:], wordSeparator),

			// The string is short enough! Return it.
			inStr	// else
		) where wrapPoint =
				choose(
					filter(
						FindChar(inStr, wordSeparator),
						value <= charsPerLine_ // Drop those too great
					),
					value	// Pick the largest of the remaining
				)
	",


	/*************************************************************************
	 *   FindChar:
	 * Handy character-finder. Returns all of the indicies where the character
	 * appears.
	 *************************************************************************/
	FindChar: "def(string inStr, string searchChar) -> [int]
		filter(
			map(inStr, if(value = searchChar, index) ),
			value != null
		)
	",
	 
	/*************************************************************************
	 *   CutEscapeSequences:
	 * Drops ALL escape sequences from the string passed it, and then
	 * returns it.
	 *************************************************************************/
	CutEscapeSequences: "def(string inStr) -> string
		fold(
			filter(
				map(split(inStrWithoutNewlines, escapeChar_),
					if(index % 2 = 0, value, null) // Get even values only.
				),
				value != null
			),
			a+b
		) // End of fold()
		where inStrWithoutNewlines =
				fold(filter(map(inStr, value), value != '\n'), 
					 (string <- a) + (string <- b) // Necessary
				)
	",
	

	// There used to be an older system for text that the current system
	// has replaced. Look at commit
	//    8f7828eaec2ae92819c149f9ecbf3bd3587a4bf3
	// in the repo
	//    https://github.com/Autofire/blind.git

}, // End of properties

} // End of file
