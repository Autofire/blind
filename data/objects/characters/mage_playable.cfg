# mage_playable.cfg
# The player character
# Search for IMPORTANT before making any big changes
# TODO:
# Yellow: write code that helps get player around edges.

{

#DEFINES#
id: "mage_playable",
prototype: ["player_controlled"],
editor_info: { category: "Characters" },
solid_dimensions: ["player","common", "item"],
collide_dimensions: ["player", "common", "item"],
vehicle: false,
has_feet: false,
feet_width: null,
hitpoints: 10,
max_hitpoints: 10,
mass: 5,
is_human: true,
traction: 0,
no_move_to_standing: true,

zorder: "@include data/zorder.cfg:player",

properties: {

	// Make player walk slower when diagonal; sqrt(2) is due to Pythagorean's thrm.
	movespeed: "int(250.0/ if((UpOrDown) and(LeftOrRight), sqrt(2), 1))
			where LeftOrRight =
				ctrl_keyboard(keys['left']) or ctrl_keyboard(keys['right'])
			where UpOrDown =
				ctrl_keyboard(keys['down']) or ctrl_keyboard(keys['up'])
			",
			
	bumpspeed: "int :: 2500",
	bumpvol: "decimal :: 0.5",
	bump_cooldown: "int :: 30",
	bump_offset: "int :: 5",
	// IMPORTANT: We want a bump cooldown so that a cornered player doesn't get crazy.
	time_of_last_hbump: { type: 'int', default: 0 },	// Horizontal bumps
	time_of_last_vbump: { type: 'int', default: 0 },	// Vertical bumps
	is_hbump_cooldown: "bool ::
		if(level.cycle - time_of_last_hbump < bump_cooldown, true, false)",
	is_vbump_cooldown: "bool ::
		if(level.cycle - time_of_last_vbump < bump_cooldown, true, false)",
	
	posthit_invicibility_period: "80",	
	hurt_velocity: "int :: 1000",
	player_thickness: "int :: 10",	// Player character's solid area thickness
	
	attack_cooldown: "21",
	cycle_of_last_attack: { type: 'int', default: -30 },
	is_attack_on_cooldown: "cycle - cycle_of_last_attack < attack_cooldown",
	
	player_damage_response: "def(string damage_type, int amount, int attacker_midpoint_x, int attacker_midpoint_y) -> commands
	[sound('player_hit.wav', global_volume-(0.04*2d3)),
	set(velocity_x, hurt_velocity * cos(angle)),
	set(velocity_y, hurt_velocity * sin(angle))]
		where angle = if(attacker_midpoint_x >= me.midpoint_x, 180.0, 0.0) +
					  atan(
						decimal(attacker_midpoint_y - me.midpoint_y)/
						decimal( max(attacker_midpoint_x - me.midpoint_x, 1) ))
	",
	
	fire_action: "def(any action) -> commands
		",
	
	# -- gui -- #
	border_offset: "int :: 27",	# Add this to top-left based coords, otherwise subtract
	
	gui_left:   "border_offset",
	gui_right:  "level.camera_position[2] - border_offset",
	gui_hmid: "level.camera_position[2]/2 - border_offset",
	
	gui_top:    "border_offset",
	gui_bottom: "level.camera_position[3] - border_offset",
	gui_vmid: "level.camera_position[3]/2 - border_offset",
	
	// Erase every button object on the gui
	destroy_choices: "map(filter(level.chars, value is obj button), remove_object(value))",
	
	// display_choices([['display1', 'action1'], ['display2',action2]...])
	//	Creates a list of buttons displaying 'displayN',
	//	sending back 'actionN' to the player object.
	display_choices: "def([[string]] choices) -> commands [
		destroy_choices,		// Clean up any messes so we don't get tons of buttons
		map(range(size(choices)),
			spawn('button',
				level.camera_position[2]/2 - 27,
				level.camera_position[3]/2 - 27 + value*button_height,
				1,	/* The facing doesn't matter */
				[text(choices[value][0], 'default', 2, true),
				 set(child.action, choices[value][0])])
					asserting size(choices[value]) = 2  // Make sure the function is called correctly
					where button_height = 70			// Must be greater than button pixel height x2
		)]",
	
	gui_heart_display: {
		type: "obj heart_display",
		init: "object('heart_display', 27+7, 27+95, {})",
		persistent: false,
	},
	
/*	gui_button: {
		type: "obj button",
		init: "object('button', level.camera_position[2] - 27, level.camera_position[3] - 27, {})",
		persistent: false,
	},*/
	
	gui_frame: {
		type: "obj frame",
		init: "object('frame', level.camera_position[2]/2, level.camera_position[3]/2, {})",
		persistent: false,
	},
	
	gui_description_writer: {
		type: "obj text_writer",
		init: "object('text_writer', 10 + 27, level.camera_position[3] - 36 - 27,
			{buffer: 'Hi my name is billy Hi my name is billyHi my name is billyHi my name is billy'}
		)",
		persistent: false,
	},
	
	gui_dialog_writer: {
		type: "obj text_writer",
		init: "object('text_writer', 10 + 27, 5 + 27,
			{buffer: 'Hi my name is billy Hi my name is billyHi my name is billyHi my name is billy'}
		)",
		persistent: false,
	},
	
	set_up_gui: "def() -> commands [
		map(components,
			'gui_element', [
				remove_object(gui_element),
				add_object(gui_element),
			]
		) where components = [gui_heart_display, gui_description_writer, gui_dialog_writer, gui_frame]
	]",

	

	lights_on: "set(level.frame_buffer_shaders, [])",
	lights_out: "lights_off",	// An alias
	lights_off: "[
		set(level.frame_buffer_shaders, [
			{
				begin_zorder: background,
				end_zorder: -2,	// Don't effect some gfx
				shader_info: {name: 'blindfold'}
			},
			{
				begin_zorder: 0,	// Still, don't effect some gfx
				end_zorder: 0,
				shader_info: {name: 'silhouette'}
			}
			/*{
				begin_zorder: 2,	// Still, don't effect some gfx
				end_zorder: blindfold,
				shader_info: {name: 'blindfold'}
			},*/
		]) 	 where background = -1000000	// See zorder.cfg
				where blindfold = 20,  		// TODO: Make this reference zorder.cfg
	]",
		
	is_blind: "bool :: if(level.frame_buffer_shaders = [], false, true)",	
	
	// This comes out of player_controlled; copied here for convenience
	store_event_add: "def(string event_name, int addend) -> commands
	set(stored_events, zip(stored_events, {(event_name): addend}, a+b))
	asserting event_name != '' | {message:'Attempting to add a stored event, but the event name given is an empty string.', name:event_name, addend:addend}",
	
	store_event: "def(string event_name, int value) -> commands
		add(stored_events, {(event_name): value})
		asserting event_name != '' | {message:'Attempting to store an event, but the event name given is an empty string.', name:event_name, value:value}",
	
	get_stored_event: "def(string event_name) -> string|int|null (stored_events[event_name])",
	stored_events: {type: "{string -> int}", default: {"started_game" : 1}},
		
		
	# -- String and List Manipulation -- #	
	tail: "def(string input) -> string
		if(input != '', input[:size(input)-1], input)",	// Drop last element
	behead: "def(string input) -> string
		input[1:]",				// Drop first

	// Doesn't seem to work
	set_list: "def(list inlist, int index, any value) -> list
		inlist[:index] + [value] + inlist[index+1:]",
	
	# -- Extra keybinds -- #
	// Following three functions come out of frogatto_playable.cfg
	_key_store: { type: "{string|int -> int|null}", default: {} },
    track_key: "def(string|int key_name) ->commands if(key_name in ctrl_keys, if(not key_name in _key_store, add(_key_store, {(key_name): cycle})), set(_key_store[key_name], null))",
    ctrl_keyboard: "def(string|int key_name) ->int|null if(key_name in _key_store, (cycle - (int <- _key_store[key_name])), null )",

	keys: { type: '{string -> string}', default: {
		left: 'a',
		right:'d',
		up:   'w',
		down: 's'} },
	all_keys: "map(keys, value)",
	all_actions: "keys(keys)",
	
	//dialog_data: { type: '{string -> class dialog_node}' },
},	#### EVENTS START HERE ####

on_create: "[animation('look_down'),
	set(invincible, 50),
	set(cycle, level.cycle),
	set(collide_dimensions_in, ['player', 'common', 'item']),
	set(solid_dimensions_in, ['player', 'common', 'item']),
	set(facing, 1),		// No flipping! Must always face the same direction
	set(time_last_hit, 0),
	set(time_of_last_hbump, -bump_cooldown),
	set(time_of_last_vbump, -bump_cooldown),
/*	fold(map(dialog_data, { key: construct('dialog_node', value) }), a+b, {})
		where dialog_data = { string -> map } <- get_document('data/dialog_nodes.cfg')*/
]",

on_start_level: "if(level.id != 'end.cfg',
	[set_up_gui(), save_game(), checkpoint_game(), set(time_last_hit, 0)])",
on_load: "if(level.id != 'end.cfg', [set_up_gui(), set(time_last_hit, 0)])",

on_change_solid_dimensions_fail: "[
	proto_event('player_controlled', 'change_solid_dimensions_fail'),
]",

# -- Player Inputs and Animations -- #
//on_click: "debug(mouse_x)",
//on_mouse_enter: "debug(arg.mouse_x)",

on_process: "[
	map(all_keys, track_key(value)),	// Keep track of all our assigned keybinds

	set(velocity_x, velocity_x/4),	// This replaces friction	
	set(velocity_y, velocity_y/4),
	
	set(level.camera_position, [
		midpoint_x - camera_width/2,
		midpoint_y - camera_heigth/2
	])  where camera_width = level.camera_position[2]
		where camera_heigth = level.camera_position[3],
	
	//Fire input events such as 'input_up', 'input_down', etc. 
	if(not is_busy, map(all_actions,
			if(ctrl_keyboard(keys[value]), fire_event('input_'+value))
		)
	),
]",

timer_frequency: 2,
on_timer: "[
	//Handle ending of invincibility.
	if((level.cycle - time_last_hit)/2 <= 50 and (level.cycle - time_last_hit)/2 > 1,
		set(solid_dimensions_in, ['player', 'common'])),
	if(not is_invincible_posthit, set(alpha,255), set(solid_dimensions_in, [])),
]",

// Manage player's collisions w/ walls
on_collide_side: "if(
	solid(level, midpoint_x-player_thickness-16, midpoint_y)
							and animation != 'push_left'
							and not is_hbump_cooldown
							and ctrl_keyboard(keys['left']), [
		animation('push_left'),
		add(velocity_x, bumpspeed),
		sound('bump.wav', bumpvol),
		set(time_of_last_hbump, level.cycle),
		if(is_blind, spawn('bump',
			midpoint_x-player_thickness-bump_offset,
			midpoint_y,
			{})
		)
	],
	solid(level, midpoint_x+player_thickness+16, midpoint_y)
							and animation != 'push_right'
							and not is_hbump_cooldown
							and ctrl_keyboard(keys['right']), [
		animation('push_right'),
		add(velocity_x,-bumpspeed),
		sound('bump.wav', bumpvol),
		set(time_of_last_hbump, level.cycle),
		if(is_blind, spawn('bump',
			midpoint_x+player_thickness+bump_offset,
			midpoint_y,
			{rotate: 180})
		)
	]
)",
on_collide_feet: "if(animation != 'push_down'
							and not is_vbump_cooldown
							and ctrl_keyboard(keys['down']), [
	animation('push_down'),
	add(velocity_y,-bumpspeed),
	sound('bump.wav', bumpvol),
	set(time_of_last_vbump, level.cycle),
	if(is_blind, spawn('bump',
		midpoint_x,
		midpoint_y+player_thickness+bump_offset,
		{rotate: -90})
	)
])",
on_collide_head: "if(animation != 'push_up'
							and not is_vbump_cooldown
							and ctrl_keyboard(keys['up']), [
	animation('push_up'),
	add(velocity_y, bumpspeed),
	sound('bump.wav', bumpvol),
	set(time_of_last_vbump, level.cycle),
	if(is_blind, spawn('bump',
		midpoint_x,
		midpoint_y-player_thickness-bump_offset*5,
		{rotate: 90})
	)
])",

on_input_up:    "[add(velocity_y, -movespeed),
				  if(is_standing_still, animation('walk_up'))]",
on_process_walk_up: "if(not ctrl_keyboard(keys['up']), animation('look_up'))",
on_end_walk_up_anim: "animation('walk_up')",
on_process_push_up: "if(not ctrl_keyboard(keys['up']), animation('look_up'))",
on_end_push_up_anim: "animation('look_up')",

on_input_down:  "[add(velocity_y, movespeed),
				  if(is_standing_still, animation('walk_down'))]",
on_process_walk_down: "if(not ctrl_keyboard(keys['down']), animation('look_down'))",
on_end_walk_down_anim: "animation('walk_down')",
on_process_push_down: "if(not ctrl_keyboard(keys['down']), animation('look_down'))",
on_end_push_down_anim: "animation('look_down')",

on_input_right: "[add(velocity_x, movespeed),
				  if(is_standing_still, animation('walk_right'))]",
on_process_walk_right: "if(not ctrl_keyboard(keys['right']), animation('look_right'))",
on_end_walk_right_anim: "animation('walk_right')",
on_process_push_right: "if(not ctrl_keyboard(keys['right']), animation('look_right'))",
on_end_push_right_anim: "animation('look_right')",

on_input_left:  "[add(velocity_x, -movespeed),
				  if(is_standing_still, animation('walk_left'))]",
on_process_walk_left: "if(not ctrl_keyboard(keys['left']), animation('look_left'))",
on_end_walk_left_anim: "animation('walk_left')",
on_process_push_left: "if(not ctrl_keyboard(keys['left']), animation('look_left'))",
on_end_push_left_anim: "animation('look_left')",

#ANIMATIONS#
animation: [
	{
		"@base": true,		
		image: "characters/mage.png",
		solid_area: [8,15,18,25],		
		body_area: [8,15,18,25],		
		pad: 3,
	},

	# -- Walking and Looking -- #
	{
		id: "look_down",		
		rect: [90, 3, 115, 27],
		frames: 1,
		frames_per_row: 8,
		duration: 6,
	},

	{
		id: "look_up",
		rect: [208, 3, 233, 28],
		frames: 1,
		frames_per_row: 4,
		duration: 8,
	},
	
	{
		id: "look_right",
		rect: [90, 34, 115, 59],
		frames: 1,
		frames_per_row: 4,
		duration: 8,
	},

	{
		id: "look_left",
		rect: [150, 34, 175, 59],
		frames: 1,
		frames_per_row: 4,
		duration: 8,
	},
	
	{
		id: "walk_down",
		rect: [3, 3, 28, 28],
		frames: 4,
		frames_per_row: 4,
		duration: 9,
	},
	
	{
		id: "walk_up",
		rect: [121, 3, 146, 28],
		frames: 4,
		frames_per_row: 4,
		duration: 9,
	},

	{
		id: "walk_right",
		rect: [3, 34, 28, 59],
		frames: 4,
		frames_per_row: 4,
		duration: 9,
	},
	
	{
		id: "walk_left",
		rect: [121, 34, 146, 59],
		frames: 4,
		frames_per_row: 4,
		duration: 9,
	},

	{
		id: "push_down",
		rect: [3, 3, 28, 28],
		frames: 4,
		frames_per_row: 4,
		duration: 15,
	},
	
	{
		id: "push_up",
		rect: [121, 3, 146, 28],
		frames: 4,
		frames_per_row: 4,
		duration: 15,
	},

	{
		id: "push_right",
		rect: [3, 34, 28, 59],
		frames: 4,
		frames_per_row: 4,
		duration: 15,
	},
	
	{
		id: "push_left",
		rect: [121, 34, 146, 59],
		frames: 4,
		frames_per_row: 4,
		duration: 15,
	},

	# -- Magic Weilding -- #			
	{
		id: "begin_prepare",
		rect: [3, 3, 27, 27],
		frames: 1,
		frames_per_row: 1,
		duration: 25,
	},
	
	{
		id: "prepare",
		rect: [209, 65, 234, 90],
		frames: 1,
		frames_per_row: 1,
		duration: 1,
	},
	
	{
		id: "cast3",
		rect: [209, 65, 234, 90],
		frames: 1,
		frames_per_row: 1,
		duration: 30,
	},
	
	{
		id: "cast_down",
		rect: [61, 65, 86, 90],
		frames: 1,
		frames_per_row: 3,
		duration: 20,
		//duration: 12,
	},
	
	{
		id: "cast_up",
		rect: [150, 65, 175, 90],
		frames: 1,
		frames_per_row: 3,
		duration: 20,
	},
	
	{
		id: "cast_right",
		rect: [61, 94, 86, 119],
		frames: 1,
		frames_per_row: 3,
		duration: 20,
	},
	
	{
		id: "cast_left",
		rect: [150, 94, 175, 119],
		frames: 1,
		frames_per_row: 3,
		duration: 20,
	},
	# -- Items -- #			
	{
		id: "item_get_begin",
		rect: [3, 3, 27, 27],
		frames: 1,
		frames_per_row: 1,
		duration: 25,
	},	
				
	{
		id: "item_get_end",
		rect: [3, 3, 27, 27],
		frames: 1,
		frames_per_row: 1,
		duration: 25,
	},
],

object_type: [
{
		id: "prepare_spell_dialogue",
		// This will get filled out later, when a
		// more user friendly dialogue is worked out.
		//
		// This object will create several text objects, and then
		// this object will die when those objects are done.
		//   (killing the text objects in the process.)
},
	
{
	id: "firebolt",
	dies_on_inactive: true,
	timer_frequency: 450,
	object_level_collisions: true,
	solid_dimensions: ["enemy"],
	collide_dimensions: ["enemy"],
	prototype: ["shot"],
	properties: {
	        attack_damage: "2",
	        team: "'player'",
	},
	
	on_end_normal_anim: "animation('normal')",
	on_process: "if((time_in_animation%7) = 0, spawn('mage_playable.firebolt_trail',midpoint_x,midpoint_y,{velocity_x:0,velocity_y:0}))",
	on_end_flash_anim: "die()",
	on_timer: "die()",
	animation:
		{
		id: "normal",
		image: "effects/magic_fire.png",
		attack_area: [1,1,6,6],
		pad: 3,
		rect: [2,2,10,10],
		frames: 4,
		frames_per_row: 4,
		duration: 5
	    },
},
	
{
	id: "firebolt_trail",
	ignore_collide: true,
	on_end_normal_anim: "die()",
    
	zorder: -5,
	dies_on_inactive: true,
	on_spawned: "animation('normal')",

	animation:
	    {
		id: "normal",
		image: "effects/magic_fire.png",
		pad: 3,
		rect: [2, 14, 6, 18],
		frames: 4,
		frames_per_row: 5,
		duration: 4,
		x_accel: 0,
		y_accel: 0
	    },
},
	
{
	id: "fireball",
	dies_on_inactive: true,
	timer_frequency: 450,
	object_level_collisions: true,
	solid_dimensions: ["enemy"],	
	collide_dimensions: ["enemy"],
	prototype: ["shot"],
	properties: {
	        attack_damage: "1",
	        team: "'player'",
	},
	
	on_create: "[if(
		velocity_x > 0, set(facing, 1),
		velocity_x < 0, [set(facing, -1), add(x, -20)],
		velocity_y < 0, [animation('normalup'), add(x, -7), add(y, -15)],
		velocity_y > 0, [animation('normaldown'), add(x, -9), add(y, 13)],
		0),
		if(velocity_y != 0, add(x, 0))]",
	on_end_normal_anim: "animation('normal')",	
	on_end_normalup_anim: "animation('normalup')",
	on_end_normaldown_anim: "animation('normaldown')",
	on_end_flash_anim: "die()",
	on_timer: "die()",
	
	on_die: "spawn('mage_playable.fireball_explosion',midpoint_x,midpoint_y, {},
		[map(range(8), value,
			schedule(1d8, spawn('mage_playable.fireball_explosion',midpoint_x + radius*cos(value*45),midpoint_y + radius*sin(value*45), {}))
		where radius = 55)
	])",
	
	animation: [
		{
		id: "normal",
		image: "effects/magic_fire.png",		
		attack_area: [7,-1,16,7],
		solid_area: [9,1,14,5],
		pad: 2,
		rect: [2,22,17,30],
		frames: 3,
		frames_per_row: 4,
		duration: 5
	    },
	    
		{
		id: "normalup",
		image: "effects/magic_fire.png",		
		attack_area: [-1,-2,9,7],
		solid_area: [1,0,7,5],
		pad: 1,
		rect: [118,1,126,17],
		frames: 3,
		frames_per_row: 1,
		duration: 5
	    },
	    
		{
		id: "normaldown",
		image: "effects/magic_fire.png",		
		attack_area: [-1,8,9,17],
		solid_area: [1,10,7,15],
		pad: 1,
		rect: [108,1,116,17],
		frames: 3,
		frames_per_row: 1,
		duration: 5
	    },	    
	]
},

{
	id: "fireball_explosion",
	prototype: ["hittable"],
	solid_dimensions: ["enemy"],	
	collide_dimensions: ["enemy"],
	on_end_normal_anim: "die()",
    
	zorder: 50,
	dies_on_inactive: true,
	on_spawned: "[animation('normal'), set(custom_draw, [1.0, 2.0, 3.0, 4.0, [v,-v], [v,v], [-v,v], [-v,-v]]) where v = 0]",
	properties: {
	        attack_damage: "1",
	        team: "'player'",
	        damage_cooldown: "6",
	},
	
	on_create: "sound('explode.wav', 0.03 + (0.01*1d5))",

	animation:
	    {
		id: "normal",
		image: "effects/magic_fire.png",		
//		attack_area: [-14,-14,36,36],	// Center is 11
		attack_area: [0,-1,22,22],
		pad: 2,
		rect: [2,34,24,56],
		frames: 4,
		frames_per_row: 4,
		duration: 2,
		y_accel: 0
	    },
},
],

}
