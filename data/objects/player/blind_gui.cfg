{
id: "blind_gui",

properties: {
	# -- gui -- #
	border_offset: "int :: 27",	# Add this to top-left based coords, otherwise subtract
	
	gui_left:   "border_offset",
	gui_right:  "level.camera_position[2] - border_offset",
	gui_hmid: "level.camera_position[2]/2 - border_offset",
	
	gui_top:    "border_offset",
	gui_bottom: "level.camera_position[3] - border_offset",
	gui_vmid: "level.camera_position[3]/2 - border_offset",
	
	// Erase every button object on the gui
	destroy_choices: "map(filter(level.chars, value is obj button), remove_object(value))",
	
	// display_choices([['display1', 'action1'], ['display2',action2]...])
	//	Creates a list of buttons displaying 'displayN',
	//	sending back 'actionN' to the player object.
	display_choices: "def([[string]] choices) -> commands [
		destroy_choices,		// Clean up any messes so we don't get tons of buttons
		map(choices,
			spawn('button',
				level.camera_position[2]/2 - gui_offset + offset_x,
				level.camera_position[3]/2 - gui_offset + offset_y + index*button_height,
				{buttonLabel: value[0],
				 action:      value[1]}
			)		asserting size(value) = 2	// Make each button has its command with it
					where button_height   = 66	// Must be greater than button pixel height x2
					where gui_offset      = 27	// Is the global offset of gui
					where offset_x        = 322 // Align the buttons to the right bar
					where offset_y        = -136// Align the buttons to the top of the right bar
		)
	]",
	
	gui_heart_display: {
		type: "obj heart_display",
		init: "object('heart_display', 27 + 10, 27+104, {})",
		persistent: false,
	},
	
	gui_button: {
		type: "obj button",
		init: "object('button', level.camera_position[2] - 27, level.camera_position[3] - 27, {})",
		persistent: false,
	},
	
	gui_frame: {
		type: "obj frame",
		init: "object('frame', level.camera_position[2]/2, level.camera_position[3]/2, {})",
		persistent: false,
	},
	
	// Increasing the number in parentheses moves the text higher
	gui_description_writer: {
		type: "obj text_writer",
		init: "object('text_writer', 10 + 27, level.camera_position[3] - (46) - 27,
			{buffer: ' _ _ _Greetings! Descriptions of the things you can touch are shown here.'}
		)",
		persistent: false,
	},
	
	gui_dialog_writer: {
		type: "obj text_writer",
		init: "object('text_writer', 10 + 27, 3 + 27,
			{buffer: 'Use WASD to move around.\nTurn your speakers on!'}
		)",
		persistent: false,
	},
	
	set_up_gui: "def() -> commands [
		map(components,
			'gui_element', [
				remove_object(gui_element),
				add_object(gui_element),
			]
		) where components = [gui_heart_display, gui_description_writer, gui_dialog_writer, gui_frame]
	]",

	tear_down_gui: "def() -> commands [
		map(components,
			'gui_element', [
				remove_object(gui_element),
			]
		) where components = [gui_heart_display, gui_description_writer, gui_dialog_writer, gui_frame]
	]",
} // End of properties

} // End of file
