# blind_playable.cfg
# The player character
# Search for IMPORTANT before making any big changes
# TODO:
# Yellow: write code that helps get player around edges.

{

#DEFINES#
id: "blind_playable",

prototype: [
	// Player_specific prototypes
	"shaders_",
	"text_handler_",
	"gui_",
	"mouse_",
	"sequences_", // This includes sequence_handler_ for us
	
	// General prototype
	"player_controlled"
],

editor_info: { category: "Characters" },
solid_dimensions: ["player","common", "item"],
collide_dimensions: ["player", "common", "item"],
load_variations: "blind",
vehicle: false,
has_feet: false,
feet_width: null,
hitpoints: 10,
max_hitpoints: 10,
mass: 5,
is_human: true,
friction: 0,
traction: 0,
no_move_to_standing: true,

zorder: "@include data/zorder.cfg:player",

properties: {
	// Make player walk slower when diagonal; sqrt(2) is due to Pythagorean's thrm.
	movespeed: "int(1*250.0/ if((UpOrDown) and (LeftOrRight), sqrt(2), 1))
			where LeftOrRight =
				CtrlKeyboard(keys['l']) or CtrlKeyboard(keys['r'])
			where UpOrDown =
				CtrlKeyboard(keys['d']) or CtrlKeyboard(keys['u'])
			",

	current_triggers: { type: 'int', default: 0 },
	
	//bumpPushback_:     "int :: 2500",
	bumpPushback_:       "int :: 0",
//	bumpVolume_:     "decimal :: 0.25",
	bumpVolume_:     "decimal :: 0",
	bumpCooldown_:       "int :: 30",   // Frequency of sound effect
	bumpOffset_:         "int :: 4",    // Effect offset
	
	posthitInvincibilityPeriod_: "80",	
	hurt_velocity: "int :: 1000",
	
	// Player's solid area width/height
	// Used for level collisions from the side
	playerSize_:  "int :: 10",
	playerHeight_: "int :: 20",
	
	PlayerDamageResponse: "def(string damageType_,
							   int    amount, 
							   int    attacker_midpoint_x, 
							   int    attacker_midpoint_y) -> commands
	   [sound('player_hit.wav', global_volume-(0.04*2d3)),
		set(velocity_x, hurt_velocity * cos(angle)),
		set(velocity_y, hurt_velocity * sin(angle))]
			where angle = if(attacker_midpoint_x >= me.midpoint_x, 180.0, 0.0) +
				atan(decimal(attacker_midpoint_y - me.midpoint_y)/
					 decimal( max(attacker_midpoint_x - me.midpoint_x, 1) ))
	",
	
	// collideDir is the postfix
	DoBump: "def(string collideDir) -> commands [
		
		// Attempt to create the bump effect regardless of cooldowns, etc.	
		CreateBumpEffect(collideDir),
	
		// We want to
		//  1) make sure we aren't already pushing
		//  2) keep button mashing from creating the sound on top of itself
		//   2a) but it's okay if it comes from different directions
		//  3) make sure player is actually trying to walk in that direction(?)
		if( (animation != 'push_' + collideDir) and
			(not Timer_IsStarted(timerName) or Timer_HasExpired(timerName)) and
			(CtrlKeyboard(keys[collideDir])),
		[
				animation('push_' + collideDir),
				sound('bump.wav', bumpVolume_),
				Timer_Start(timerName, bumpCooldown_),
				
				add(velocity_x, -MakeForwardX(bumpPushback_)),
				add(velocity_y, -MakeForwardY(bumpPushback_)),
				
		]) where timerName = 'bump_' + collideDir
	]",
	
	// TODO: Make it so that it only gets rid of the bump of its
	// current facing.
	CreateBumpEffect: "def(string collideDir) -> commands [
		remove_object(filter(level.chars, value is obj bump)),
		
		if(is_blind,
			spawn(
				'bump',
				me.mid_x +
					MakeForwardX(playerSize_ + bumpOffset_, collideDir) + vertXOffset__,
				me.mid_y +
					MakeForwardY(playerSize_ + bumpOffset_, collideDir),
				{rotate: rotationTable__[collideDir]}
			)
		)
		where rotationTable__ =
			{string -> int} :: {'l': 0, 'u': 90, 'r': 180, 'd': 270 }
		where vertXOffset__ =
			if(collideDir = 'u', 1,
			   collideDir = 'd', 1,
			   0)
	]",
	
	// Camera system -- allows for smoother following of player
	recentXY:  { type: "[Point2d]", init: "[[0,0]]" },
	cameraLag: "int :: 4",	// Frames of camera lag
	oldestXY_: "Point2d <- recentXY[0]",
	
	// Call this at the start of every level or to reset the camera
	InitCamera: "def() -> commands
		set(recentXY,
			map(range(cameraLag),
				lib.standardize.camera(level)
			)
		)
	",
	
	// Call this on_draw
	UpdateCamera: "def() -> commands [
		set(recentXY, 
			recentXY[1:cameraLag+1] +
			lib.standardize.toPoints([me])
		);
		
		lib.standardize.set_camera(level, oldestXY_)
	]",
	
	
	// Blindness code
	lights_on: "[
        set(level.frame_buffer_shaders, []),
        set(variations, []);
        
        set(animation, animation) // Without this, it doesn't instantly change
    ]",
    
    lights_out: "lights_off",   // An alias
    lights_off: "[
        set(level.frame_buffer_shaders, [
            {
                begin_zorder: -1000000,
                end_zorder: -2, // Don't effect some gfx
                shader_info: {name: 'blindfold'}
            }
        ]),
    	add(variations, ['blind']);
    	
        set(animation, animation) // Without this, it doesn't instantly change
	]",

    is_blind: "bool :: if(level.frame_buffer_shaders = [], false, true)",
    
	
	# -- String and List Manipulation -- #	
	tail: "def(string input) -> string
		if(input != '', input[:size(input)-1], input)",	// Drop last element
	behead: "def(string input) -> string
		input[1:]",				// Drop first

	
	# -- Extra keybinds -- #
	// Following three functions come out of frogatto_playable.cfg
	_KeyStore: { type: "{string|int -> int|null}", default: {} },
    TrackKey: "def(string|int key_name) -> commands 
    	if(key_name in ctrl_keys,
    		if(not key_name in _KeyStore,
    			add(_KeyStore, {(key_name): cycle})
    		),
    		set(_KeyStore[key_name], null)
    	)
    ",
    
    CtrlKeyboard: "def(string|int key_name) -> int|null 
    	if(key_name in _KeyStore,
    		(cycle - (int <- _KeyStore[key_name])),
    		null
    	)
    ",

	keys: { type: '{string -> string}', default: {
		l: 'a',
		r: 'd',
		u: 'w',
		d: 's'}
	},
	
	all_keys: "map(keys, value)",
	all_actions: "keys(keys)",
},	#### EVENTS START HERE ####

on_create: "[
	animation('look_d'),
	set(invincible, 50),
	set(cycle, level.cycle),
	set(collide_dimensions_in, ['player', 'common', 'item']),
	set(solid_dimensions_in, ['player', 'common', 'item']),
	set(facing, 1),		// No flipping! Must always face the same direction
	set(time_last_hit, 0),
	InitCamera(),

	if(not is_blind, lights_on)
]",

on_start_level: "[
	SetUpGui();
	save_game(), 
	checkpoint_game(), 
	set(time_last_hit, 0),
]",

on_load: "[
	SetUpGui();
	set(time_last_hit, 0),
]",

on_open_editor: "[TearDownGui(), lights_on, DestroyChoices()]",
on_close_editor: "[SetUpGui(), lights_off]",

on_change_solid_dimensions_fail: "[
	proto_event('player_controlled', 'change_solid_dimensions_fail'),
]",

# -- Player Inputs and Animations -- #
//on_click: "debug(mouse_x)",
//on_mouse_enter: "debug(arg.mouse_x)",

on_process: "[
	/*debug(mouseAngle_, FindQuad(mouseX_, mouseY_) )
		where quadrentAdjustment_ = [0, 180, 180, 360][FindQuad(mouseXY_[0], mouseXY_[1]) - 1]
			,*/
		
	map(all_keys, TrackKey(value)),	// Keep track of all our assigned keybinds

	set(velocity_x, velocity_x/4),	// This replaces friction	
	set(velocity_y, velocity_y/4),
	
	//Fire input events such as 'input_u', 'input_d', etc. 
	if(not isBusy_, map(all_actions,
			if(CtrlKeyboard(keys[value]), fire_event('input_'+value))
		)
	),
	
	// Keep the sequence alive
	UpdateSeq()
]",

on_draw: "if(not level.is_paused, UpdateCamera())",

timer_frequency: 2,
on_timer: "[
	// Handle ending of invincibility.
	if((level.cycle - time_last_hit)/2 <= 50 and (level.cycle - time_last_hit)/2 > 1,
		set(solid_dimensions_in, ['player', 'common'])),
	if(not is_invincible_posthit, set(alpha,255), set(solid_dimensions_in, [])),
	
	// Manage desc_stack and friends
//	if(desc_stack_needs_update, update_desc_stack)
]",

// Manage player's collisions w/ walls
// The 'collide_side' event is flawed in that it cannot detect where the player
// had the collision.
on_collide_side: "
	if( solid(level,
		mid_x - playerSize_ - 8,
		mid_y - playerHeight_/2,
		1, playerHeight_),	// The width/height
			DoBump('l'),
			DoBump('r')
	)
",
on_collide_feet: "DoBump('d')",
on_collide_head: "DoBump('u')",

on_input_u:    "[add(velocity_y, -movespeed),
				  if(animType_ = 'look', animation('walk_u'))]",
on_process_walk_u: "if(not CtrlKeyboard(keys['u']), animation('look_u'))",
on_end_walk_u_anim: "animation('walk_u')",
on_process_push_u: "if(not CtrlKeyboard(keys['u']), animation('look_u'))",
on_end_push_u_anim: "animation('look_u')",

on_input_d:  "[add(velocity_y, movespeed),
				  if(animType_ = 'look', animation('walk_d'))]",
on_process_walk_d: "if(not CtrlKeyboard(keys['d']), animation('look_d'))",
on_end_walk_d_anim: "animation('walk_d')",
on_process_push_d: "if(not CtrlKeyboard(keys['d']), animation('look_d'))",
on_end_push_d_anim: "animation('look_d')",

on_input_r: "[add(velocity_x, movespeed),
				  if(animType_ = 'look', animation('walk_r'))]",
on_process_walk_r: "if(not CtrlKeyboard(keys['r']), animation('look_r'))",
on_end_walk_r_anim: "animation('walk_r')",
on_process_push_r: "if(not CtrlKeyboard(keys['r']), animation('look_r'))",
on_end_push_r_anim: "animation('look_r')",

on_input_l:  "[add(velocity_x, -movespeed),
				  if(animType_ = 'look', animation('walk_l'))]",
on_process_walk_l: "if(not CtrlKeyboard(keys['l']), animation('look_l'))",
on_end_walk_l_anim: "animation('walk_l')",
on_process_push_l: "if(not CtrlKeyboard(keys['l']), animation('look_l'))",
on_end_push_l_anim: "animation('look_l')",

#ANIMATIONS#
animation: [
	{
		"@base": true,		
		image:   "characters/player.png",
		h: 16, w: 16,	// Most frames are 16x16
		solid_area: [2,4,12,14],		
		body_area:  [2,4,12,14],		
		pad: 3,
	},

	# -- Walking and Looking -- #
	{
		id: "look_d",
		x: 59, y: 2, 
		frames: 1,
		frames_per_row: 1,
		duration: 6,
	},

	{
		id: "look_u",		
		x: 136, y: 2, 
		frames: 1,
		frames_per_row: 4,
		duration: 8,
	},
	
	{
		id: "look_r",
		x: 59, y: 25,
		frames: 1,
		frames_per_row: 4,
		duration: 8,
	},

	{
		id: "look_l",
		x: 136, y: 25,
		frames: 1,
		frames_per_row: 4,
		duration: 8,
	},
	
	{
		id: "walk_d",
		x: 2, y: 2,
		frames: 4,
		frames_per_row: 4,
		duration: 9,
	},
	
	{
		id: "walk_u",
		x: 79, y: 2,
		frames: 4,
		frames_per_row: 4,
		duration: 9,
	},

	{
		id: "walk_r",
		x: 2, y: 25,
		frames: 4,
		frames_per_row: 4,
		duration: 9,
	},
	
	{
		id: "walk_l",
		x: 79, y: 25,
		frames: 4,
		frames_per_row: 4,
		duration: 9,
	},

	{
		id: "push_d",
		x: 2, y: 2,
		frames: 4,
		frames_per_row: 4,
		duration: 15,
	},
	
	{
		id: "push_u",
		x: 79, y: 2,
		frames: 4,
		frames_per_row: 4,
		duration: 15,
	},

	{
		id: "push_r",
		x: 2, y: 25,
		frames: 4,
		frames_per_row: 4,
		duration: 15,
	},
	
	{
		id: "push_l",
		x: 79, y: 25,
		frames: 4,
		frames_per_row: 4,
		duration: 15,
	},

	# -- Magic Weilding -- #			
	{
		id: "begin_prepare",
		rect: [3, 3, 27, 27],
		frames: 1,
		frames_per_row: 1,
		duration: 25,
	},
	
	{
		id: "prepare",
		rect: [209, 65, 234, 90],
		frames: 1,
		frames_per_row: 1,
		duration: 1,
	},
	
	{
		id: "cast3",
		rect: [209, 65, 234, 90],
		frames: 1,
		frames_per_row: 1,
		duration: 30,
	},
	
	{
		id: "cast_d",
		rect: [61, 65, 86, 90],
		frames: 1,
		frames_per_row: 3,
		duration: 20,
		//duration: 12,
	},
	
	{
		id: "cast_u",
		rect: [150, 65, 175, 90],
		frames: 1,
		frames_per_row: 3,
		duration: 20,
	},
	
	{
		id: "cast_r",
		rect: [61, 94, 86, 119],
		frames: 1,
		frames_per_row: 3,
		duration: 20,
	},
	
	{
		id: "cast_l",
		rect: [150, 94, 175, 119],
		frames: 1,
		frames_per_row: 3,
		duration: 20,
	},
	# -- Items -- #			
	{
		id: "item_get_begin",
		rect: [3, 3, 27, 27],
		frames: 1,
		frames_per_row: 1,
		duration: 25,
	},	
				
	{
		id: "item_get_end",
		rect: [3, 3, 27, 27],
		frames: 1,
		frames_per_row: 1,
		duration: 25,
	},
],

variations: {
	blind: "[
		map(filter(doc.animation, value.image in images_to_convert), 'anim',
			set(anim.image, regex_replace(anim.image, 'player', 'player_blind'))
		) where images_to_convert = ['characters/player.png'],

	]"
},  // End of variations



object_type: [
{
		id: "prepare_spell_dialogue",
		// This will get filled out later, when a
		// more user friendly dialogue is worked out.
		//
		// This object will create several text objects, and then
		// this object will die when those objects are done.
		//   (killing the text objects in the process.)
},
	
{
	id: "firebolt",
	dies_on_inactive: true,
	timer_frequency: 450,
	object_level_collisions: true,
	solid_dimensions: ["enemy"],
	collide_dimensions: ["enemy"],
	prototype: ["shot"],
	properties: {
	        attackDamage: "2",
	        team_: "'player'",
	},
	
	on_end_normal_anim: "animation('normal')",
	on_process: "if((time_in_animation%7) = 0, spawn('blind_playable.firebolt_trail',midpoint_x,midpoint_y,{velocity_x:0,velocity_y:0}))",
	on_end_flash_anim: "die()",
	on_timer: "die()",
	animation:
		{
		id: "normal",
		image: "effects/magic_fire.png",
		attack_area: [1,1,6,6],
		pad: 3,
		rect: [2,2,10,10],
		frames: 4,
		frames_per_row: 4,
		duration: 5
	    },
},
	
{
	id: "firebolt_trail",
	ignore_collide: true,
	on_end_normal_anim: "die()",
    
	zorder: -5,
	dies_on_inactive: true,
	on_spawned: "animation('normal')",

	animation:
	    {
		id: "normal",
		image: "effects/magic_fire.png",
		pad: 3,
		rect: [2, 14, 6, 18],
		frames: 4,
		frames_per_row: 5,
		duration: 4,
		accel_x: 0,
		accel_y: 0
	    },
},
	
{
	id: "fireball",
	dies_on_inactive: true,
	timer_frequency: 450,
	object_level_collisions: true,
	solid_dimensions: ["enemy"],	
	collide_dimensions: ["enemy"],
	prototype: ["shot"],
	properties: {
	        attackDamage: "1",
	        team_: "'player'",
	},
	
	on_create: "[if(
		velocity_x > 0, set(facing, 1),
		velocity_x < 0, [set(facing, -1), add(x, -20)],
		velocity_y < 0, [animation('normalup'), add(x, -7), add(y, -15)],
		velocity_y > 0, [animation('normaldown'), add(x, -9), add(y, 13)],
		0),
		if(velocity_y != 0, add(x, 0))]",
	on_end_normal_anim: "animation('normal')",	
	on_end_normalup_anim: "animation('normalup')",
	on_end_normaldown_anim: "animation('normaldown')",
	on_end_flash_anim: "die()",
	on_timer: "die()",
	
	on_die: "spawn('blind_playable.fireball_explosion',midpoint_x,midpoint_y, {},
		[map(range(8), value,
			schedule(1d8, spawn('blind_playable.fireball_explosion',midpoint_x + radius*cos(value*45),midpoint_y + radius*sin(value*45), {}))
		where radius = 55)
	])",
	
	animation: [
		{
		id: "normal",
		image: "effects/magic_fire.png",		
		attack_area: [7,-1,16,7],
		solid_area: [9,1,14,5],
		pad: 2,
		rect: [2,22,17,30],
		frames: 3,
		frames_per_row: 4,
		duration: 5
	    },
	    
		{
		id: "normalup",
		image: "effects/magic_fire.png",		
		attack_area: [-1,-2,9,7],
		solid_area: [1,0,7,5],
		pad: 1,
		rect: [118,1,126,17],
		frames: 3,
		frames_per_row: 1,
		duration: 5
	    },
	    
		{
		id: "normaldown",
		image: "effects/magic_fire.png",		
		attack_area: [-1,8,9,17],
		solid_area: [1,10,7,15],
		pad: 1,
		rect: [108,1,116,17],
		frames: 3,
		frames_per_row: 1,
		duration: 5
	    },	    
	]
},

{
	id: "fireball_explosion",
	prototype: ["hittable"],
	solid_dimensions: ["enemy"],	
	collide_dimensions: ["enemy"],
	on_end_normal_anim: "die()",
    
	zorder: 50,
	dies_on_inactive: true,
	on_spawned: "[animation('normal'), set(custom_draw, [1.0, 2.0, 3.0, 4.0, [v,-v], [v,v], [-v,v], [-v,-v]]) where v = 0]",
	properties: {
	        attackDamage: "1",
	        team_: "'player'",
	        damageCooldown_: "6",
	},
	
	on_create: "sound('explode.wav', 0.03 + (0.01*1d5))",

	animation:
	    {
		id: "normal",
		image: "effects/magic_fire.png",		
//		attack_area: [-14,-14,36,36],	// Center is 11
		attack_area: [0,-1,22,22],
		pad: 2,
		rect: [2,34,24,56],
		frames: 4,
		frames_per_row: 4,
		duration: 2,
		y_accel: 0
	    },
},
],


}
