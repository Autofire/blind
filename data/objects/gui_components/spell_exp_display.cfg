//Displays player's spell exp.
//TODO: Make it show levels properly
//TODO for another day: Allow more than one type of spell
{
	id: "spell_exp_display",
	is_strict: true,
	use_absolute_screen_coordinates: true,
	hidden_in_game: true,
	serializable: false,
	
	zorder: "@include data/zorder.cfg:in_front_of_everything",
	zsub_order: 1,
	//no_compile_image: "gui/progress-bar-center.png",

	properties: {
//		target: "obj player_controlled <- lp asserting lp where lp = level.player",
		target: "level.player",
		
		spell_exp_bar_max_length: "61*2",
		spell_exp_bar_cap_width: 5,
		selected_spell: 3,	// Eventually this will reference the player object
		//spell_exp_bar_length: "int :: round(((spell_exp_bar_max_length - spell_exp_bar_cap_width) * level.player.spell_exp[3]) / level.player.spell_exp_cap[3])",
		spell_exp_bar_length: "int :: round(((spell_exp_bar_max_length - spell_exp_bar_cap_width) * level_progress) / 100)
			where level_progress = round(100 * (target.dec_spell_level[selected_spell]
				- (if(target.spell_level = target.spell_level_cap,
					level.player.spell_level[selected_spell],
					level.player.spell_level[selected_spell]))))",
	
		spell_exp_bar_container: {
			type: "widget", 
			init: "widget(me, {
				type: 'image',
				image: 'gui/hud3.png',
				area: [5,28,26,93],
			})",
		},
		
		spell_exp_bar_center: {
			type: "obj spell_exp_display.bar_center",
			init: "object('spell_exp_display.bar_center', x,y,1)",
		},
		spell_exp_bar_left: {
			type: "obj spell_exp_display.left_cap",
			init: "object('spell_exp_display.left_cap', x,y,1)",
		},
		spell_exp_bar_right: {
			type: "obj spell_exp_display.right_cap",
			init: "object('spell_exp_display.right_cap', x,y,1)",
		}
	},
	on_start_level: "[add_object(spell_exp_bar_center), add_object(spell_exp_bar_left), add_object(spell_exp_bar_right)]",
	on_create: "[
		add_object(spell_exp_bar_center),
		add_object(spell_exp_bar_left),
		add_object(spell_exp_bar_right),
		set(me.widgets.child, spell_exp_bar_container),
	]",
	
	on_process: "[
		[
			set(spell_exp_bar_left.x, x_offset), set(spell_exp_bar_left.y, y_offset),
			set(spell_exp_bar_right.x, x_offset ), set(spell_exp_bar_right.y, y_offset+ spell_exp_bar_length+4),
			if(spell_exp_bar_length > 5, 
				[set(spell_exp_bar_left.alpha,255), set(spell_exp_bar_right.alpha,255), set(spell_exp_bar_center.alpha,255), 
					spell_exp_bar_center.set_draw_params( x_offset, y_offset+10, spell_exp_bar_length-4)],
				[set(spell_exp_bar_left.alpha,0), set(spell_exp_bar_right.alpha,0), set(spell_exp_bar_center.alpha,0)]
			)
		] where x_offset = me.x+4 where y_offset = me.y-2, //42
				 


	]",
	
	
	object_type: [
	{
		zorder: "@include data/zorder.cfg:in_front_of_everything",
		zsub_order: 2,
		id: "bar_center",
		is_strict: true,
		use_absolute_screen_coordinates: true,
		properties: {
			_height: { type: "int", default: 10 },
			set_draw_params: "def(int new_x, int new_y, int new_height) -> commands [
									set(x, new_x),
									set(y, new_y),
									set(_height, new_height)
								]"
						

		},
		on_process: "set(draw_area, [0.0, 0.0, img_w/2.0, _height/2.0])",
		
		animation: {
			id:	'normal',
			image: 'gui/spell_exp-bar-center.png',
			rect: [0,0,17,31], 
		},
	},{
		zorder: "@include data/zorder.cfg:in_front_of_everything",
		zsub_order: 2,
		id: "right_cap",
		is_strict: true,
		use_absolute_screen_coordinates: true,

		animation: {
			id:	'normal',
			image: 'gui/hud3.png',
			rect: [0,8,17,15], 
		},
	},{
		zorder: "@include data/zorder.cfg:in_front_of_everything",
		zsub_order: 2,
		id: "left_cap",
		is_strict: true,
		use_absolute_screen_coordinates: true,

		animation: {
			id:	'normal',
			image: 'gui/hud3.png',
			rect: [0,0,17,7], 
		},
	}],
	
}

