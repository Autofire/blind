//A health display, in the style of hearts. One hitpoint is half a heart.
{
	id: "text_writer",
	is_strict: true,
	use_absolute_screen_coordinates: true,
	#hidden_in_game: true,
	serializable: false,
	
	editor_info: { category: "Characters" },
	zorder: "@include data/zorder.cfg:in_front_of_everything",

	properties: {
		//target: { type: "custom_obj" },
		target: "custom_obj <- lp asserting lp where lp = level.local_player",

		buffer: { type: 'string', default: '' },
		prepped_buffer: { type: 'string', default: '' },
		display: { type: 'string', default: '' },
		font: { type: 'string', default: 'default' },
		
		window_width: { type: 'int', init: 12 },

		# A string must be expanded to be able to be reversed
		reverse_string: "def(string input) -> string
			fold( reverse( map(range(size(input)), value, string <- input[value]) ), a+b)",
			
	    tail: "def(string input) -> string
			if(input != '', input[:size(input)-1], input)", // Drop last element
		behead: "def(string input) -> string
			input[1:]",             // Drop first
		
		# Steps:
		#  Pull a chunk of text off our buffer
		#  Recursively give back letters from the end
		#    until the character is a space; replace it with a \n
		#  Get the next chunk, if there is more text.
		
		prep_buffer: "def(string input) -> string
			chunk /*prepped_buffer = prepped_buffer+ chunk[:find_last_space(chunk)]*/
				where chunk = input[0:window_width]
		",
		
		# Note that size gives one beyond the string's end, hence the 1
		find_last_space: "def(string input) -> int
			_find_last_space(input, 1)",
			
		_find_last_space: "def(string input, int offset) -> int
			if(input[size(input) - offset] = ' ',
				size(input) - offset + 1,			/* Return, +1 includes space */
				_find_last_space(input, offset+1))
					asserting offset < size(input)",
	},
	
	timer_frequency: 3,
	on_timer: "if(buffer != '', [
		set(display, display + buffer[0:1]),
		set(buffer, behead(buffer))
		] )",

	on_process: "text(display, font)",
	on_create: "set(buffer, 'Hello me World Hello World me Hello World Hello')",

	/*on_create: "set_widgets(
			widget(me, {
				type: 'image', 
				image: 'gui/hud3.png', 
				area: [33,1,49,17], 
				x: 0, 
				y: 0,
			})
		)"*/
}
