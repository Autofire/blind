{
id:          "charger",
prototype:   ["hittable"],
editor_info: { category: "Monsters" },

solid_dimensions:   ["player","common"],
collide_dimensions: ["common"],
has_feet:           false,
zorder:             "@include data/zorder.cfg:npcs",
hitpoints:          60,

properties: {
	topdownFriction: "2.0",

	wanderBaseVelocity_: "decimal :: 55",
	windupBaseVelocity_: "decimal :: 30",
	chargeBaseVelocity_: "decimal :: 200",
	
	wanderVelocityXY_: "[decimal, decimal] ::
		[wanderBaseVelocity_ * cos(randAngle),
		 wanderBaseVelocity_ * sin(randAngle)]
			where randAngle = 1d360",
	
	wanderRefreshDelay_:   "int :: 50 + 5d5",
	chargeWindupDuration_: "int :: 75",
	
	crashDamage_: "int :: 20",
	
	TargetVelocityXY: {type: '[decimal]', default: [0, 0]},

	/******
	 * AI *
	 ******/
	heardPlayer_: false,

	isDizzy_:   "bool :: not Timer_HasExpired('dizzy')",

	PickAction: "def() -> commands
	
		// Run decide something if we aren't busy with other things
		if(animation = 'normal',
		
			// If we know where player is, do a charge
			if(heardPlayer_,
				BeginCharge(level.player.mid_xy),
				Wander()
			)
		)
	",

	BeginCharge: "def([int] targetXY) -> commands [
		
		// Go away from the player a bit, as if winding up
		set(animation, 'windup'),
		set(TargetVelocityXY,
			[windupBaseVelocity_ * cos(180 + targetAngle),
			 windupBaseVelocity_ * sin(180 + targetAngle)]
		),
		
		// Schedule the charge itself
		schedule(chargeWindupDuration_, [
			set(animation, 'charge'),
			set(TargetVelocityXY,
				[chargeBaseVelocity_ * cos(targetAngle),
				 chargeBaseVelocity_ * sin(targetAngle)]
			)
		])
	] where targetAngle =
		angle(me.mid_x, me.mid_y, level.player.mid_x, level.player.mid_y)
	",
	
	Wander: "def() -> commands
		if(Timer_HasExpired('WanderRefresh'),
			[
				Timer_Start('WanderRefresh', wanderRefreshDelay_),
				set(TargetVelocityXY, wanderVelocityXY_)
			]
		)
	",

	Move: "def() -> commands
	[
		add(velocity_x, TargetVelocityXY[0]),
		add(velocity_y, TargetVelocityXY[1])
	]",

	DoCollide: "def() -> commands
		if(animation = 'charge',
			ReactToCrash(),             // We charged into a wall!
			Timer_Stop('WanderRefresh') // We walking into a wall; change dir.
		)
	",

	ReactToCrash: "def() -> commands [
		set(velocity_x, -velocity_x * 5),
		set(velocity_y, -velocity_y * 5),
		set(TargetVelocityXY, [0, 0]),
		GetHitSourceless('none', crashDamage_),

		set(animation, 'dizzy')	// The dizzy animation ends itself
	]",

}, // End of properties

on_process: "[
	PickAction();
	Move();
	DoFriction()
]",

on_collide_head: "DoCollide()",
on_collide_side: "DoCollide()",
on_collide_feet: "DoCollide()",

on_hear_sound: "debug(arg.soundName)",

on_end_dizzy_anim: "animation('normal')",

animation: [
	{
		"@base": true,
		image: "blank.png",
		rect:  [0, 0, 23, 23],
		solid_area: [0, 0, 23, 23],
		body_area:  'all',
		
		duration: 1,
	},
	{
		id:    "normal",	
	},
	{
		id:    "windup",	
	},
	{
		id:    "charge",	
	},
	{
		id:    "dizzy",
		duration: 100
	},

] // End of animation

} // End of file
