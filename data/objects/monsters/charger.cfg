{
id:          "charger",
prototype:   ["hittable"],
editor_info: { category: "Monsters" },

solid_dimensions:   ["player","common"],
collide_dimensions: ["common"],
has_feet:           false,
zorder:             "@include data/zorder.cfg:npcs",
hitpoints:          60,

properties: {
	/************************
	 * Moevement and Timing *
	 ************************/
	topdownFriction: "2.0",
	attackDamage:    "3",

	wanderBaseVelocity_: "decimal :: 55",
	windupBaseVelocity_: "decimal :: 30",
	chargeBaseVelocity_: "decimal :: 500",
	
	wanderVelocityXY_: "[decimal, decimal] ::
		[wanderBaseVelocity_ * cos(randAngle),
		 wanderBaseVelocity_ * sin(randAngle)]
			where randAngle = 1d360",
	
	// Most durations/delays are handled by animations
	chargeWindupDuration_: "int :: 50",
	
	crashDamage_:  "int     :: 20",    // Damage taken when charing into a wall
	crashRebound_: "decimal :: -5.0",  // Multiplyer to velocity upon hitting wall
	hitRebound_:   "decimal :: -3.0",  // Multiplyer to velocity upon hitting object
	
	targetVelocityXY: {type: '[decimal]', default: [0, 0]},

	/**********
	 * Sounds *
	 **********/
	
	// These are cycles into the given animation to play the sound
	stepFreq_: "int ::
		switch(animation,
			'wander', 25,
			'charge', 10,
			-1
		)
	",
	
	footLocations_: "[[int]] :: 
		map(
			[
				[space, space],
				[-space, space],
				[space, -space],
				[-space, -space],
			],
			zip(value, mid_xy, a+b)	// Take the offsets and add them to midpoint
		) where space = 20
	",
	
	footIndexVar: { type: 'int', default: 0 }, // Used to choose feet
	currentFootXY_: "[int] :: footLocations_[footIndexVar % size(footLocations_)]",
	
	stepSound_: "string ::
		switch(animation,
			'charge', 'effects/step/metal_fast' + (1d2) + '.wav',
			'effects/step/metal_med' + (1d2) + '.wav'
		)
	",
	
	stepEffect_: "string ::
		switch(animation,
			'charge', 'Fast step',
			'Med step'
		)
	",
	
	takeStep: "def() -> commands [
		if(stepFreq_ != -1 and time_in_animation % stepFreq_ = 0 ,
			[
			sound_falloff_xy(currentFootXY_, stepSound_, stepEffect_),
			add(footIndexVar, 1),
			]
		)
	]",

	/******
	 * AI *
	 ******/
	BeginCharge: "def([int] targetXY) -> commands [
		
		// We used to 'wind up' before charging, but it caused issues
		set(animation, 'windup'),
		set(targetVelocityXY,
			[0, 0]
			/*[windupBaseVelocity_ * cos(180 + targetAngle),
			 windupBaseVelocity_ * sin(180 + targetAngle)]*/
		),
		sound_falloff('effects/monsters/charger_windup.wav'),
		
		// Schedule the charge itself
		schedule(chargeWindupDuration_, [
			set(animation, 'charge'),
			set(targetVelocityXY,
				[chargeBaseVelocity_ * cos(targetAngle),
				 chargeBaseVelocity_ * sin(targetAngle)]
			)
		])
	] where targetAngle =
		angle(me.mid_x, me.mid_y, level.player.mid_x, level.player.mid_y)
	",
	
	Wander: "def() -> commands [
		set(targetVelocityXY, wanderVelocityXY_),
		animation('wander')
	]",
	EndWander: "def() -> commands [
		set(targetVelocityXY, [0, 0]),
		animation('normal')
	]",

	Move: "def() -> commands [
		add(velocity_x, targetVelocityXY[0]),
		add(velocity_y, targetVelocityXY[1])
	]",

	DoCollide: "def(null|custom_obj collide_with) -> commands [
		
		sound_falloff('effects/monsters/charger_crash.wav'),
	
		if(animation = 'charge',
			if(collide_with is obj hittable,
				ReactToHit(obj hittable <- collide_with),  // We hit something! Do damage to it!
				ReactToCrash()                             // We charged into a wall!
			),
			Wander() // We walking into a wall; change dir.
		)
	]",

	ReactToHit: "def(obj hittable collide_with) -> commands [
		set(velocity_x, velocity_x * hitRebound_),
		set(velocity_y, velocity_y * hitRebound_),
		set(targetVelocityXY, [0, 0]),
		execute(collide_with, collide_with.GetHitBy(me)),
		
		set(animation, 'huzzah')	// This animation ends itself
	]",

	ReactToCrash: "def() -> commands [
		set(velocity_x, velocity_x * crashRebound_),
		set(velocity_y, velocity_y * crashRebound_),
		set(targetVelocityXY, [0, 0]),
		GetHitSourceless('wall', crashDamage_),

		set(animation, 'dizzy')	// The dizzy animation ends itself
	]",

	play_object_specific_pain_vocalization: "
	 def(string damageType_, damage_amount) -> commands 
		
		// Only do hurt noise if we aren't dead
		// Also don't do noise if we hit a wall; we handle that in the dizzy anim
		if(damage_amount < hitpoints and damageType_ != 'wall', 	
			schedule(hurtSoundDelay_,
				sound_falloff('effects/monsters/charger_hurt.wav')
			) where hurtSoundDelay_ = 10
		)
	",
	
	
	effectLibrary: "{ string -> SoundData } :: {
		'effects/monsters/charger_windup.wav': {
			rgb:          [190,40,30],
			initRadius:   30,
			carryDist:    500,
			lifetime:     56,
			maxVolume:    0.7,
			repeatCount:  1,
			repeatDelay:  25
		},
	
		'effects/monsters/charger_hurt.wav': {
			rgb:          [190,40,30],
			initRadius:   30,
			carryDist:    300,
			lifetime:     25,
			maxVolume:    0.7,
			repeatCount:  1,
			repeatDelay:  25
		},
		
		'effects/monsters/charger_crash.wav': {
			rgb:          [150,130,130],
			initRadius:   20,
			carryDist:    400,
			lifetime:     10,
			maxVolume:    0.7,
			repeatCount:  1,
			repeatDelay:  25
		},
		
		'Med step': {
			rgb:          [59,59,83],
			initRadius:   2,
			carryDist:    150,
			lifetime:     20,
			maxVolume:    1.0,
			repeatCount:  1,
			repeatDelay:  25
		},

		'Fast step': {
			rgb:          [79,79,93],
			initRadius:   2,
			carryDist:    200,
			lifetime:     17,
			maxVolume:    1.0,
			repeatCount:  1,
			repeatDelay:  25
		},
	}",
}, // End of properties

on_process: "[
	takeStep(),	// Do step sound effect
	Move();
	DoFriction()
]",

on_collide_head: "DoCollide(arg.collide_with)",
on_collide_side: "DoCollide(arg.collide_with)",
on_collide_feet: "DoCollide(arg.collide_with)",

on_hear_sound: "
	if(animation in ['normal', 'wander'] and arg.source != me,
		BeginCharge([int] <- arg.sourceXY)
	)
",

on_end_normal_anim: "Wander()",
on_end_wander_anim: "EndWander()",

on_end_charge_anim: "animation('charge')",

on_process_dizzy:   "
	if(time_in_animation = hurtSoundDelay_,
		sound_falloff('effects/monsters/charger_hurt.wav')
	) where hurtSoundDelay_ = 10
",
on_end_dizzy_anim:  "animation('normal')",
on_end_huzzah_anim: "animation('normal')",


// Dying stuff
on_die: "[
	animation('dying'),
	set(hitpoints, 1)
]",
on_enter_dying_anim: "sound_falloff('effects/charger_die.wav')",
on_end_dying_anim: "remove_object(me)",

animation: [
	{
		"@base": true,
		image: "blank.png",
		rect:  [0, 0, 23, 23],
		solid_area: [0, 0, 23, 23],
		body_area:  'all',
		
		duration: 1,
	},
	{
		id:    "normal",
		duration: 90	
	},
	{
		id:    "wander",
		duration: 80	
	},
	{
		id:    "windup",
	},
	{
		id:    "charge",
		duration: 32	
	},
	{
		id:    "dizzy",
		duration: 100
	},
	{
		id:    "huzzah",
		duration: 100
	},
	{
		id:    "dying",
		solid_area: null,
		body_area:  'all',
		duration: 70
	},

], // End of animation


} // End of file
